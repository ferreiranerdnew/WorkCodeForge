"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
const plugin_commonjs_1 = __importDefault(require("@rollup/plugin-commonjs"));
const rollup_plugin_sourcemaps_1 = __importDefault(require("rollup-plugin-sourcemaps"));
const plugin_typescript_1 = __importDefault(require("@rollup/plugin-typescript"));
const rollup_plugin_json_1 = __importDefault(require("rollup-plugin-json"));
const pkg = require('./package.json');
const banner = `/*
 * ${pkg.name} ${pkg.version} <${pkg.homepage}>
 * Copyright (c) ${(new Date()).getFullYear()} ${pkg.author.name} <${pkg.author.url}>
 * Released under ${pkg.license} License
 */`;
exports.default = {
    input: `src/index.ts`,
    output: [
        { file: pkg.main, name: pkg.name, format: 'umd', banner, sourcemap: true },
        { file: pkg.module, format: 'esm', banner, sourcemap: true },
    ],
    external: [],
    watch: {
        include: 'src/**',
    },
    plugins: [
        // Allow node_modules resolution, so you can use 'external' to control
        // which external modules to include in the bundle
        // https://github.com/rollup/rollup-plugin-node-resolve#usage
        (0, plugin_node_resolve_1.default)(),
        // Allow json resolution
        (0, rollup_plugin_json_1.default)(),
        // Compile TypeScript files
        (0, plugin_typescript_1.default)(),
        // Allow bundling cjs modules (unlike webpack, rollup doesn't understand cjs)
        (0, plugin_commonjs_1.default)(),
        // Resolve source maps to the original source
        (0, rollup_plugin_sourcemaps_1.default)(),
    ],
};
