{"ast":null,"code":"// middleware example link: https://gist.github.com/markerikson/3df1cf5abbac57820a20059287b4be58\nimport { wsEndpoint } from '../utils/constants';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { SET_VIDEO_PARTICIPANTS, SET_SOCKETID, USER_DISCONNECT } from '../reducers/mapReducer';\nexport const socketRTK = () => {\n  return storeAPI => {\n    const socket = io(wsEndpoint);\n    socket.on('connect', () => {\n      storeAPI.dispatch(SET_SOCKETID({\n        id: socket.id\n      }));\n    });\n    socket.on('userList', users => {\n      storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\n    });\n    socket.on('movementMessage', arg => {\n      storeAPI.dispatch(JSON.parse(arg)); //type:UPDATE_OTHERS\n    });\n    socket.on('userDisconnect', id => {\n      storeAPI.dispatch(USER_DISCONNECT(id));\n    });\n    socket.on('receivedAnnouncement', arg => {\n      storeAPI.dispatch(JSON.parse(arg));\n    });\n    socket.on('receiveDirect', arg => {\n      storeAPI.dispatch(arg);\n    });\n    return next => action => {\n      const newState = next(action);\n\n      if (action.type === 'WALK') {\n        socket.volatile.emit('movementMessage', JSON.stringify({\n          type: 'UPDATE_OTHERS',\n          payload: storeAPI.getState().players[action.payload.id]\n        }));\n      }\n\n      if (action.type === 'ANNOUNCEMENT') {\n        socket.emit('announcement', JSON.stringify({\n          type: 'RECEIVED_ANNOUNCEMENT',\n          payload: storeAPI.getState().outgoingGif\n        }));\n      }\n\n      if (action.type === 'SEND_DIRECT') {\n        socket.emit('sendDirect', {\n          type: 'RECEIVE_DIRECT',\n          payload: storeAPI.getState().outgoingGif\n        });\n      }\n\n      return newState;\n    };\n  };\n};","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/src/middleware/socketRTK.js"],"names":["wsEndpoint","io","Peer","SET_VIDEO_PARTICIPANTS","SET_SOCKETID","USER_DISCONNECT","socketRTK","storeAPI","socket","on","dispatch","id","users","arg","JSON","parse","next","action","newState","type","volatile","emit","stringify","payload","getState","players","outgoingGif"],"mappings":"AAAA;AACA,SAASA,UAAT,QAA2B,oBAA3B;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SACEC,sBADF,EAEEC,YAFF,EAGEC,eAHF,QAIO,wBAJP;AAKA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAQC,QAAD,IAAc;AACnB,UAAMC,MAAM,GAAGP,EAAE,CAACD,UAAD,CAAjB;AACAQ,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBF,MAAAA,QAAQ,CAACG,QAAT,CAAkBN,YAAY,CAAC;AAAEO,QAAAA,EAAE,EAAEH,MAAM,CAACG;AAAb,OAAD,CAA9B;AACD,KAFD;AAIAH,IAAAA,MAAM,CAACC,EAAP,CAAU,UAAV,EAAuBG,KAAD,IAAW;AAC/BL,MAAAA,QAAQ,CAACG,QAAT,CAAkBP,sBAAsB,CAACS,KAAD,CAAxC;AACD,KAFD;AAIAJ,IAAAA,MAAM,CAACC,EAAP,CAAU,iBAAV,EAA8BI,GAAD,IAAS;AACpCN,MAAAA,QAAQ,CAACG,QAAT,CAAkBI,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAlB,EADoC,CACA;AACrC,KAFD;AAIAL,IAAAA,MAAM,CAACC,EAAP,CAAU,gBAAV,EAA6BE,EAAD,IAAQ;AAClCJ,MAAAA,QAAQ,CAACG,QAAT,CAAkBL,eAAe,CAACM,EAAD,CAAjC;AACD,KAFD;AAIAH,IAAAA,MAAM,CAACC,EAAP,CAAU,sBAAV,EAAmCI,GAAD,IAAS;AACzCN,MAAAA,QAAQ,CAACG,QAAT,CAAkBI,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAlB;AACD,KAFD;AAIAL,IAAAA,MAAM,CAACC,EAAP,CAAU,eAAV,EAA4BI,GAAD,IAAS;AAClCN,MAAAA,QAAQ,CAACG,QAAT,CAAkBG,GAAlB;AACD,KAFD;AAIA,WAAQG,IAAD,IAAWC,MAAD,IAAY;AAC3B,YAAMC,QAAQ,GAAGF,IAAI,CAACC,MAAD,CAArB;;AACA,UAAIA,MAAM,CAACE,IAAP,KAAgB,MAApB,EAA4B;AAC1BX,QAAAA,MAAM,CAACY,QAAP,CAAgBC,IAAhB,CACE,iBADF,EAEEP,IAAI,CAACQ,SAAL,CAAe;AACbH,UAAAA,IAAI,EAAE,eADO;AAEbI,UAAAA,OAAO,EAAEhB,QAAQ,CAACiB,QAAT,GAAoBC,OAApB,CAA4BR,MAAM,CAACM,OAAP,CAAeZ,EAA3C;AAFI,SAAf,CAFF;AAOD;;AAED,UAAIM,MAAM,CAACE,IAAP,KAAgB,cAApB,EAAoC;AAClCX,QAAAA,MAAM,CAACa,IAAP,CACE,cADF,EAEEP,IAAI,CAACQ,SAAL,CAAe;AACbH,UAAAA,IAAI,EAAE,uBADO;AAEbI,UAAAA,OAAO,EAAEhB,QAAQ,CAACiB,QAAT,GAAoBE;AAFhB,SAAf,CAFF;AAOD;;AAED,UAAIT,MAAM,CAACE,IAAP,KAAgB,aAApB,EAAmC;AACjCX,QAAAA,MAAM,CAACa,IAAP,CAAY,YAAZ,EAA0B;AACxBF,UAAAA,IAAI,EAAE,gBADkB;AAExBI,UAAAA,OAAO,EAAEhB,QAAQ,CAACiB,QAAT,GAAoBE;AAFL,SAA1B;AAID;;AACD,aAAOR,QAAP;AACD,KA7BD;AA8BD,GAxDD;AAyDD,CA1DM","sourcesContent":["// middleware example link: https://gist.github.com/markerikson/3df1cf5abbac57820a20059287b4be58\r\nimport { wsEndpoint } from '../utils/constants';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\nimport {\r\n  SET_VIDEO_PARTICIPANTS,\r\n  SET_SOCKETID,\r\n  USER_DISCONNECT,\r\n} from '../reducers/mapReducer';\r\nexport const socketRTK = () => {\r\n  return (storeAPI) => {\r\n    const socket = io(wsEndpoint);\r\n    socket.on('connect', () => {\r\n      storeAPI.dispatch(SET_SOCKETID({ id: socket.id }));\r\n    });\r\n\r\n    socket.on('userList', (users) => {\r\n      storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\r\n    });\r\n\r\n    socket.on('movementMessage', (arg) => {\r\n      storeAPI.dispatch(JSON.parse(arg)); //type:UPDATE_OTHERS\r\n    });\r\n\r\n    socket.on('userDisconnect', (id) => {\r\n      storeAPI.dispatch(USER_DISCONNECT(id));\r\n    });\r\n\r\n    socket.on('receivedAnnouncement', (arg) => {\r\n      storeAPI.dispatch(JSON.parse(arg));\r\n    });\r\n\r\n    socket.on('receiveDirect', (arg) => {\r\n      storeAPI.dispatch(arg);\r\n    });\r\n\r\n    return (next) => (action) => {\r\n      const newState = next(action);\r\n      if (action.type === 'WALK') {\r\n        socket.volatile.emit(\r\n          'movementMessage',\r\n          JSON.stringify({\r\n            type: 'UPDATE_OTHERS',\r\n            payload: storeAPI.getState().players[action.payload.id],\r\n          })\r\n        );\r\n      }\r\n\r\n      if (action.type === 'ANNOUNCEMENT') {\r\n        socket.emit(\r\n          'announcement',\r\n          JSON.stringify({\r\n            type: 'RECEIVED_ANNOUNCEMENT',\r\n            payload: storeAPI.getState().outgoingGif,\r\n          })\r\n        );\r\n      }\r\n\r\n      if (action.type === 'SEND_DIRECT') {\r\n        socket.emit('sendDirect', {\r\n          type: 'RECEIVE_DIRECT',\r\n          payload: storeAPI.getState().outgoingGif,\r\n        });\r\n      }\r\n      return newState;\r\n    };\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}