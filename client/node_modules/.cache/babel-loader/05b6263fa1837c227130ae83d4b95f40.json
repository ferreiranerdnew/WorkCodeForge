{"ast":null,"code":"// src/middleware/socketRTK.js\nimport { wsEndpoint } from '../utils/constants';\nimport { io } from 'socket.io-client';\nimport { createPeer, addPeer } from '../utils/peerManager';\nimport { SET_VIDEO_PARTICIPANTS, SET_SOCKETID, USER_DISCONNECT } from '../reducers/mapReducer';\nexport const socketRTK = () => {\n  return storeAPI => {\n    const socket = io(wsEndpoint, {\n      transports: ['websocket']\n    });\n    let localStream = null;\n    const peers = {}; // mapa socketId => Peer instance\n    // Conectar e armazenar socket ID\n\n    socket.on('connect', () => {\n      storeAPI.dispatch(SET_SOCKETID({\n        id: socket.id\n      })); // Capturar mídia local ao conectar\n\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        localStream = stream; // informar ao servidor que entrou na chamada\n\n        socket.emit('joinVideo');\n      }).catch(err => console.error('Erro ao acessar mídia:', err));\n    }); // Recebe lista de usuários para iniciar peers\n\n    socket.on('userList', users => {\n      if (Array.isArray(users)) {\n        storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users)); // Criar peers iniciadores para cada usuário existente\n\n        users.forEach(userId => {\n          if (userId === socket.id) return;\n\n          if (!peers[userId]) {\n            const peer = createPeer(userId, socket.id, localStream, socket);\n            peers[userId] = peer;\n          }\n        });\n      }\n    }); // Recebe sinal de novo usuário iniciador\n\n    socket.on('userJoined', payload => {\n      // payload: { signal, callerID }\n      const {\n        callerID\n      } = payload;\n\n      if (!peers[callerID]) {\n        const peer = addPeer(payload, localStream, socket);\n        peers[callerID] = peer;\n      }\n    }); // Resposta ao sinal retornado\n\n    socket.on('receivingReturnedSignal', ({\n      signal,\n      id\n    }) => {\n      const peer = peers[id];\n      if (peer) peer.signal(signal);\n    }); // Limpeza ao desconectar\n\n    socket.on('userDisconnect', socketId => {\n      storeAPI.dispatch(USER_DISCONNECT(socketId));\n\n      if (peers[socketId]) {\n        peers[socketId].destroy();\n        delete peers[socketId];\n      }\n    }); // Outros eventos (movimento, announcements, GIFs)\n\n    socket.on('movementMessage', arg => {\n      try {\n        const action = JSON.parse(arg);\n        storeAPI.dispatch(action);\n      } catch (err) {\n        console.error('Erro ao processar movementMessage:', err);\n      }\n    });\n    socket.on('receivedAnnouncement', arg => {\n      try {\n        const action = JSON.parse(arg);\n        storeAPI.dispatch(action);\n      } catch (err) {\n        console.error('Erro ao processar receivedAnnouncement:', err);\n      }\n    });\n    socket.on('receiveDirect', arg => {\n      if ((arg === null || arg === void 0 ? void 0 : arg.type) && (arg === null || arg === void 0 ? void 0 : arg.payload)) {\n        storeAPI.dispatch(arg);\n      }\n    }); // Middleware Redux: intercepta ações e emite sinais\n\n    return next => action => {\n      const result = next(action);\n\n      switch (action.type) {\n        case 'WALK':\n          socket.volatile.emit('movementMessage', JSON.stringify({\n            type: 'UPDATE_OTHERS',\n            payload: storeAPI.getState().players[action.payload.id]\n          }));\n          break;\n\n        case 'ANNOUNCEMENT':\n          socket.emit('announcement', JSON.stringify({\n            type: 'RECEIVED_ANNOUNCEMENT',\n            payload: storeAPI.getState().outgoingGif\n          }));\n          break;\n\n        case 'SEND_DIRECT':\n          socket.emit('sendDirect', {\n            type: 'RECEIVE_DIRECT',\n            payload: storeAPI.getState().outgoingGif\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      return result;\n    };\n  };\n};","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/src/middleware/socketRTK.js"],"names":["wsEndpoint","io","createPeer","addPeer","SET_VIDEO_PARTICIPANTS","SET_SOCKETID","USER_DISCONNECT","socketRTK","storeAPI","socket","transports","localStream","peers","on","dispatch","id","navigator","mediaDevices","getUserMedia","video","audio","then","stream","emit","catch","err","console","error","users","Array","isArray","forEach","userId","peer","payload","callerID","signal","socketId","destroy","arg","action","JSON","parse","type","next","result","volatile","stringify","getState","players","outgoingGif"],"mappings":"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","sourcesContent":["// src/middleware/socketRTK.js\r\nimport { wsEndpoint } from '../utils/constants';\r\nimport { io } from 'socket.io-client';\r\nimport { createPeer, addPeer } from '../utils/peerManager';\r\nimport {\r\n  SET_VIDEO_PARTICIPANTS,\r\n  SET_SOCKETID,\r\n  USER_DISCONNECT,\r\n} from '../reducers/mapReducer';\r\n\r\nexport const socketRTK = () => {\r\n  return (storeAPI) => {\r\n    const socket = io(wsEndpoint, { transports: ['websocket'] });\r\n\r\n    let localStream = null;\r\n    const peers = {}; // mapa socketId => Peer instance\r\n\r\n    // Conectar e armazenar socket ID\r\n    socket.on('connect', () => {\r\n      storeAPI.dispatch(SET_SOCKETID({ id: socket.id }));\r\n\r\n      // Capturar mídia local ao conectar\r\n      navigator.mediaDevices\r\n        .getUserMedia({ video: true, audio: true })\r\n        .then((stream) => {\r\n          localStream = stream;\r\n          // informar ao servidor que entrou na chamada\r\n          socket.emit('joinVideo');\r\n        })\r\n        .catch((err) => console.error('Erro ao acessar mídia:', err));\r\n    });\r\n\r\n    // Recebe lista de usuários para iniciar peers\r\n    socket.on('userList', (users) => {\r\n      if (Array.isArray(users)) {\r\n        storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\r\n\r\n        // Criar peers iniciadores para cada usuário existente\r\n        users.forEach((userId) => {\r\n          if (userId === socket.id) return;\r\n          if (!peers[userId]) {\r\n            const peer = createPeer(userId, socket.id, localStream, socket);\r\n            peers[userId] = peer;\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Recebe sinal de novo usuário iniciador\r\n    socket.on('userJoined', (payload) => {\r\n      // payload: { signal, callerID }\r\n      const { callerID } = payload;\r\n      if (!peers[callerID]) {\r\n        const peer = addPeer(payload, localStream, socket);\r\n        peers[callerID] = peer;\r\n      }\r\n    });\r\n\r\n    // Resposta ao sinal retornado\r\n    socket.on('receivingReturnedSignal', ({ signal, id }) => {\r\n      const peer = peers[id];\r\n      if (peer) peer.signal(signal);\r\n    });\r\n\r\n    // Limpeza ao desconectar\r\n    socket.on('userDisconnect', (socketId) => {\r\n      storeAPI.dispatch(USER_DISCONNECT(socketId));\r\n      if (peers[socketId]) {\r\n        peers[socketId].destroy();\r\n        delete peers[socketId];\r\n      }\r\n    });\r\n\r\n    // Outros eventos (movimento, announcements, GIFs)\r\n    socket.on('movementMessage', (arg) => {\r\n      try {\r\n        const action = JSON.parse(arg);\r\n        storeAPI.dispatch(action);\r\n      } catch (err) {\r\n        console.error('Erro ao processar movementMessage:', err);\r\n      }\r\n    });\r\n    socket.on('receivedAnnouncement', (arg) => {\r\n      try {\r\n        const action = JSON.parse(arg);\r\n        storeAPI.dispatch(action);\r\n      } catch (err) {\r\n        console.error('Erro ao processar receivedAnnouncement:', err);\r\n      }\r\n    });\r\n    socket.on('receiveDirect', (arg) => {\r\n      if (arg?.type && arg?.payload) {\r\n        storeAPI.dispatch(arg);\r\n      }\r\n    });\r\n\r\n    // Middleware Redux: intercepta ações e emite sinais\r\n    return (next) => (action) => {\r\n      const result = next(action);\r\n\r\n      switch (action.type) {\r\n        case 'WALK':\r\n          socket.volatile.emit(\r\n            'movementMessage',\r\n            JSON.stringify({\r\n              type: 'UPDATE_OTHERS',\r\n              payload: storeAPI.getState().players[action.payload.id],\r\n            })\r\n          );\r\n          break;\r\n\r\n        case 'ANNOUNCEMENT':\r\n          socket.emit(\r\n            'announcement',\r\n            JSON.stringify({\r\n              type: 'RECEIVED_ANNOUNCEMENT',\r\n              payload: storeAPI.getState().outgoingGif,\r\n            })\r\n          );\r\n          break;\r\n\r\n        case 'SEND_DIRECT':\r\n          socket.emit('sendDirect', {\r\n            type: 'RECEIVE_DIRECT',\r\n            payload: storeAPI.getState().outgoingGif,\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      return result;\r\n    };\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}