{"ast":null,"code":"import Peer from 'simple-peer';\n/**\r\n * Quem inicia a chamada cria um peer no modo `initiator`\r\n */\n\nexport function createPeer(userToSignal, callerID, stream, socket) {\n  const peer = new Peer({\n    initiator: true,\n    trickle: false,\n    stream\n  });\n  peer.on('signal', signal => {\n    socket.emit('sending-signal', {\n      userToSignal,\n      callerID,\n      signal\n    });\n  });\n  return peer;\n}\n/**\r\n * Quem recebe a oferta adiciona o peer e responde com `signal`\r\n */\n\nexport function addPeer({\n  signal,\n  callerID\n}, stream, socket) {\n  const peer = new Peer({\n    initiator: false,\n    trickle: false,\n    stream\n  });\n  peer.on('signal', returnSignal => {\n    socket.emit('returning-signal', {\n      signal: returnSignal,\n      callerID\n    });\n  });\n  peer.signal(signal);\n  return peer;\n}","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/src/utils/peerManager.js"],"names":["Peer","createPeer","userToSignal","callerID","stream","socket","peer","initiator","trickle","on","signal","emit","addPeer","returnSignal"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AAEA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,YAApB,EAAkCC,QAAlC,EAA4CC,MAA5C,EAAoDC,MAApD,EAA4D;AACjE,QAAMC,IAAI,GAAG,IAAIN,IAAJ,CAAS;AACpBO,IAAAA,SAAS,EAAE,IADS;AAEpBC,IAAAA,OAAO,EAAE,KAFW;AAGpBJ,IAAAA;AAHoB,GAAT,CAAb;AAMAE,EAAAA,IAAI,CAACG,EAAL,CAAQ,QAAR,EAAmBC,MAAD,IAAY;AAC5BL,IAAAA,MAAM,CAACM,IAAP,CAAY,gBAAZ,EAA8B;AAAET,MAAAA,YAAF;AAAgBC,MAAAA,QAAhB;AAA0BO,MAAAA;AAA1B,KAA9B;AACD,GAFD;AAIA,SAAOJ,IAAP;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASM,OAAT,CAAiB;AAAEF,EAAAA,MAAF;AAAUP,EAAAA;AAAV,CAAjB,EAAuCC,MAAvC,EAA+CC,MAA/C,EAAuD;AAC5D,QAAMC,IAAI,GAAG,IAAIN,IAAJ,CAAS;AACpBO,IAAAA,SAAS,EAAE,KADS;AAEpBC,IAAAA,OAAO,EAAE,KAFW;AAGpBJ,IAAAA;AAHoB,GAAT,CAAb;AAMAE,EAAAA,IAAI,CAACG,EAAL,CAAQ,QAAR,EAAmBI,YAAD,IAAkB;AAClCR,IAAAA,MAAM,CAACM,IAAP,CAAY,kBAAZ,EAAgC;AAAED,MAAAA,MAAM,EAAEG,YAAV;AAAwBV,MAAAA;AAAxB,KAAhC;AACD,GAFD;AAIAG,EAAAA,IAAI,CAACI,MAAL,CAAYA,MAAZ;AACA,SAAOJ,IAAP;AACD","sourcesContent":["import Peer from 'simple-peer';\r\n\r\n/**\r\n * Quem inicia a chamada cria um peer no modo `initiator`\r\n */\r\nexport function createPeer(userToSignal, callerID, stream, socket) {\r\n  const peer = new Peer({\r\n    initiator: true,\r\n    trickle: false,\r\n    stream,\r\n  });\r\n\r\n  peer.on('signal', (signal) => {\r\n    socket.emit('sending-signal', { userToSignal, callerID, signal });\r\n  });\r\n\r\n  return peer;\r\n}\r\n\r\n/**\r\n * Quem recebe a oferta adiciona o peer e responde com `signal`\r\n */\r\nexport function addPeer({ signal, callerID }, stream, socket) {\r\n  const peer = new Peer({\r\n    initiator: false,\r\n    trickle: false,\r\n    stream,\r\n  });\r\n\r\n  peer.on('signal', (returnSignal) => {\r\n    socket.emit('returning-signal', { signal: returnSignal, callerID });\r\n  });\r\n\r\n  peer.signal(signal);\r\n  return peer;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}