{"ast":null,"code":"// src/reducers/communicationReducer.js\n// Adicione este conteúdo ao seu mapReducer.js existente\n// === NOVOS TIPOS DE AÇÃO ===\nexport const SET_ONLINE_USERS = 'SET_ONLINE_USERS';\nexport const ADD_ONLINE_USER = 'ADD_ONLINE_USER';\nexport const REMOVE_ONLINE_USER = 'REMOVE_ONLINE_USER';\nexport const RECEIVE_MESSAGE = 'RECEIVE_MESSAGE';\nexport const RECEIVE_PRIVATE_MESSAGE = 'RECEIVE_PRIVATE_MESSAGE';\nexport const UPDATE_USER_STATUS = 'UPDATE_USER_STATUS';\nexport const RECEIVE_TYPING_STATUS = 'RECEIVE_TYPING_STATUS';\nexport const RECEIVE_USER_JOINED = 'RECEIVE_USER_JOINED';\nexport const RECEIVE_USER_LEFT = 'RECEIVE_USER_LEFT';\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES';\nexport const ADD_NOTIFICATION = 'ADD_NOTIFICATION';\nexport const REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION'; // === ESTADO INICIAL PARA COMUNICAÇÃO ===\n// Adicione estas propriedades ao seu estado inicial existente\n\nconst communicationInitialState = {\n  // Usuários online\n  onlineUsers: [],\n  // Mensagens\n  messages: [],\n  privateMessages: [],\n  // Status de digitação\n  typingUsers: [],\n  // Notificações\n  notifications: [],\n  // Configurações de chat\n  chatSettings: {\n    soundEnabled: true,\n    notificationsEnabled: true,\n    showOnlineUsers: true,\n    maxMessages: 100\n  }\n}; // === REDUCERS PARA COMUNICAÇÃO ===\n// Adicione estes cases ao seu switch statement existente no reducer\n\nexport const communicationReducer = (state = communicationInitialState, action) => {\n  switch (action.type) {\n    // === USUÁRIOS ONLINE ===\n    case SET_ONLINE_USERS:\n      return { ...state,\n        onlineUsers: Array.isArray(action.payload) ? action.payload : []\n      };\n\n    case ADD_ONLINE_USER:\n      return { ...state,\n        onlineUsers: [...state.onlineUsers.filter(user => user.id !== action.payload.id), action.payload]\n      };\n\n    case REMOVE_ONLINE_USER:\n      return { ...state,\n        onlineUsers: state.onlineUsers.filter(user => user.id !== action.payload)\n      };\n\n    case UPDATE_USER_STATUS:\n      return { ...state,\n        onlineUsers: state.onlineUsers.map(user => user.id === action.payload.userId ? { ...user,\n          status: action.payload.status,\n          lastSeen: action.payload.lastSeen\n        } : user)\n      };\n    // === MENSAGENS ===\n\n    case RECEIVE_MESSAGE:\n      const newMessage = { ...action.payload,\n        id: action.payload.id || `msg_${Date.now()}_${Math.random()}`,\n        timestamp: action.payload.timestamp || Date.now()\n      };\n      return { ...state,\n        messages: [...state.messages.slice(-state.chatSettings.maxMessages + 1), newMessage]\n      };\n\n    case RECEIVE_PRIVATE_MESSAGE:\n      const newPrivateMessage = { ...action.payload,\n        id: action.payload.id || `private_${Date.now()}_${Math.random()}`,\n        timestamp: action.payload.timestamp || Date.now()\n      };\n      return { ...state,\n        privateMessages: [...state.privateMessages.slice(-state.chatSettings.maxMessages + 1), newPrivateMessage]\n      };\n\n    case CLEAR_MESSAGES:\n      return { ...state,\n        messages: [],\n        privateMessages: []\n      };\n    // === STATUS DE DIGITAÇÃO ===\n\n    case RECEIVE_TYPING_STATUS:\n      const {\n        userId,\n        userName,\n        isTyping\n      } = action.payload;\n\n      if (isTyping) {\n        // Adiciona ou atualiza status de digitação\n        return { ...state,\n          typingUsers: [...state.typingUsers.filter(user => user.userId !== userId), {\n            userId,\n            userName,\n            isTyping: true,\n            timestamp: Date.now()\n          }]\n        };\n      } else {\n        // Remove status de digitação\n        return { ...state,\n          typingUsers: state.typingUsers.filter(user => user.userId !== userId)\n        };\n      }\n\n    // === NOTIFICAÇÕES ===\n\n    case RECEIVE_USER_JOINED:\n    case RECEIVE_USER_LEFT:\n      const notification = {\n        id: `notification_${Date.now()}_${Math.random()}`,\n        type: action.type === RECEIVE_USER_JOINED ? 'user_joined' : 'user_left',\n        message: action.payload.message,\n        userId: action.payload.userId,\n        timestamp: action.payload.timestamp || Date.now()\n      };\n      return { ...state,\n        notifications: [...state.notifications.slice(-19), // Mantém apenas 20 notificações\n        notification]\n      };\n\n    case ADD_NOTIFICATION:\n      return { ...state,\n        notifications: [...state.notifications.slice(-19), {\n          id: action.payload.id || `notification_${Date.now()}`,\n          ...action.payload,\n          timestamp: action.payload.timestamp || Date.now()\n        }]\n      };\n\n    case REMOVE_NOTIFICATION:\n      return { ...state,\n        notifications: state.notifications.filter(notif => notif.id !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n}; // === SELETORES ===\n\nexport const selectOnlineUsers = state => {\n  var _state$communication;\n\n  return ((_state$communication = state.communication) === null || _state$communication === void 0 ? void 0 : _state$communication.onlineUsers) || [];\n};\nexport const selectMessages = state => {\n  var _state$communication2;\n\n  return ((_state$communication2 = state.communication) === null || _state$communication2 === void 0 ? void 0 : _state$communication2.messages) || [];\n};\nexport const selectPrivateMessages = state => {\n  var _state$communication3;\n\n  return ((_state$communication3 = state.communication) === null || _state$communication3 === void 0 ? void 0 : _state$communication3.privateMessages) || [];\n};\nexport const selectTypingUsers = state => {\n  var _state$communication4;\n\n  return ((_state$communication4 = state.communication) === null || _state$communication4 === void 0 ? void 0 : _state$communication4.typingUsers) || [];\n};\nexport const selectNotifications = state => {\n  var _state$communication5;\n\n  return ((_state$communication5 = state.communication) === null || _state$communication5 === void 0 ? void 0 : _state$communication5.notifications) || [];\n};\nexport const selectChatSettings = state => {\n  var _state$communication6;\n\n  return ((_state$communication6 = state.communication) === null || _state$communication6 === void 0 ? void 0 : _state$communication6.chatSettings) || {};\n}; // Seletor para mensagens privadas de um usuário específico\n\nexport const selectPrivateMessagesWithUser = (state, userId) => {\n  var _state$socket;\n\n  const messages = selectPrivateMessages(state);\n  const currentUserId = (_state$socket = state.socket) === null || _state$socket === void 0 ? void 0 : _state$socket.id;\n  return messages.filter(msg => msg.senderId === userId && msg.recipientId === currentUserId || msg.senderId === currentUserId && msg.recipientId === userId);\n}; // Seletor para usuários online excluindo o usuário atual\n\nexport const selectOtherOnlineUsers = state => {\n  var _state$socket2;\n\n  const onlineUsers = selectOnlineUsers(state);\n  const currentUserId = (_state$socket2 = state.socket) === null || _state$socket2 === void 0 ? void 0 : _state$socket2.id;\n  return onlineUsers.filter(user => user.id !== currentUserId);\n}; // Seletor para contar mensagens não lidas\n\nexport const selectUnreadMessagesCount = state => {\n  var _state$socket3;\n\n  const messages = selectMessages(state);\n  const privateMessages = selectPrivateMessages(state);\n  const currentUserId = (_state$socket3 = state.socket) === null || _state$socket3 === void 0 ? void 0 : _state$socket3.id; // Implementar lógica de mensagens não lidas baseada em timestamp\n  // Por enquanto, retorna 0\n\n  return 0;\n}; // === ACTION CREATORS ===\n\nexport const setOnlineUsers = users => ({\n  type: SET_ONLINE_USERS,\n  payload: users\n});\nexport const addOnlineUser = user => ({\n  type: ADD_ONLINE_USER,\n  payload: user\n});\nexport const removeOnlineUser = userId => ({\n  type: REMOVE_ONLINE_USER,\n  payload: userId\n});\nexport const receiveMessage = message => ({\n  type: RECEIVE_MESSAGE,\n  payload: message\n});\nexport const receivePrivateMessage = message => ({\n  type: RECEIVE_PRIVATE_MESSAGE,\n  payload: message\n});\nexport const updateUserStatus = (userId, status, lastSeen) => ({\n  type: UPDATE_USER_STATUS,\n  payload: {\n    userId,\n    status,\n    lastSeen\n  }\n});\nexport const receiveTypingStatus = (userId, userName, isTyping) => ({\n  type: RECEIVE_TYPING_STATUS,\n  payload: {\n    userId,\n    userName,\n    isTyping\n  }\n});\nexport const clearMessages = () => ({\n  type: CLEAR_MESSAGES\n});\nexport const addNotification = notification => ({\n  type: ADD_NOTIFICATION,\n  payload: notification\n});\nexport const removeNotification = notificationId => ({\n  type: REMOVE_NOTIFICATION,\n  payload: notificationId\n});","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/src/reducers/mapReducer.js"],"names":["SET_ONLINE_USERS","ADD_ONLINE_USER","REMOVE_ONLINE_USER","RECEIVE_MESSAGE","RECEIVE_PRIVATE_MESSAGE","UPDATE_USER_STATUS","RECEIVE_TYPING_STATUS","RECEIVE_USER_JOINED","RECEIVE_USER_LEFT","CLEAR_MESSAGES","ADD_NOTIFICATION","REMOVE_NOTIFICATION","communicationInitialState","onlineUsers","messages","privateMessages","typingUsers","notifications","chatSettings","soundEnabled","notificationsEnabled","showOnlineUsers","maxMessages","communicationReducer","state","action","type","Array","isArray","payload","filter","user","id","map","userId","status","lastSeen","newMessage","Date","now","Math","random","timestamp","slice","newPrivateMessage","userName","isTyping","notification","message","notif","selectOnlineUsers","communication","selectMessages","selectPrivateMessages","selectTypingUsers","selectNotifications","selectChatSettings","selectPrivateMessagesWithUser","currentUserId","socket","msg","senderId","recipientId","selectOtherOnlineUsers","selectUnreadMessagesCount","setOnlineUsers","users","addOnlineUser","removeOnlineUser","receiveMessage","receivePrivateMessage","updateUserStatus","receiveTypingStatus","clearMessages","addNotification","removeNotification","notificationId"],"mappings":"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","sourcesContent":["// src/reducers/communicationReducer.js\r\n// Adicione este conteúdo ao seu mapReducer.js existente\r\n\r\n// === NOVOS TIPOS DE AÇÃO ===\r\nexport const SET_ONLINE_USERS = 'SET_ONLINE_USERS';\r\nexport const ADD_ONLINE_USER = 'ADD_ONLINE_USER';\r\nexport const REMOVE_ONLINE_USER = 'REMOVE_ONLINE_USER';\r\nexport const RECEIVE_MESSAGE = 'RECEIVE_MESSAGE';\r\nexport const RECEIVE_PRIVATE_MESSAGE = 'RECEIVE_PRIVATE_MESSAGE';\r\nexport const UPDATE_USER_STATUS = 'UPDATE_USER_STATUS';\r\nexport const RECEIVE_TYPING_STATUS = 'RECEIVE_TYPING_STATUS';\r\nexport const RECEIVE_USER_JOINED = 'RECEIVE_USER_JOINED';\r\nexport const RECEIVE_USER_LEFT = 'RECEIVE_USER_LEFT';\r\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES';\r\nexport const ADD_NOTIFICATION = 'ADD_NOTIFICATION';\r\nexport const REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION';\r\n\r\n// === ESTADO INICIAL PARA COMUNICAÇÃO ===\r\n// Adicione estas propriedades ao seu estado inicial existente\r\nconst communicationInitialState = {\r\n  // Usuários online\r\n  onlineUsers: [],\r\n  \r\n  // Mensagens\r\n  messages: [],\r\n  privateMessages: [],\r\n  \r\n  // Status de digitação\r\n  typingUsers: [],\r\n  \r\n  // Notificações\r\n  notifications: [],\r\n  \r\n  // Configurações de chat\r\n  chatSettings: {\r\n    soundEnabled: true,\r\n    notificationsEnabled: true,\r\n    showOnlineUsers: true,\r\n    maxMessages: 100\r\n  }\r\n};\r\n\r\n// === REDUCERS PARA COMUNICAÇÃO ===\r\n// Adicione estes cases ao seu switch statement existente no reducer\r\n\r\nexport const communicationReducer = (state = communicationInitialState, action) => {\r\n  switch (action.type) {\r\n    // === USUÁRIOS ONLINE ===\r\n    case SET_ONLINE_USERS:\r\n      return {\r\n        ...state,\r\n        onlineUsers: Array.isArray(action.payload) ? action.payload : []\r\n      };\r\n\r\n    case ADD_ONLINE_USER:\r\n      return {\r\n        ...state,\r\n        onlineUsers: [\r\n          ...state.onlineUsers.filter(user => user.id !== action.payload.id),\r\n          action.payload\r\n        ]\r\n      };\r\n\r\n    case REMOVE_ONLINE_USER:\r\n      return {\r\n        ...state,\r\n        onlineUsers: state.onlineUsers.filter(user => user.id !== action.payload)\r\n      };\r\n\r\n    case UPDATE_USER_STATUS:\r\n      return {\r\n        ...state,\r\n        onlineUsers: state.onlineUsers.map(user =>\r\n          user.id === action.payload.userId\r\n            ? { ...user, status: action.payload.status, lastSeen: action.payload.lastSeen }\r\n            : user\r\n        )\r\n      };\r\n\r\n    // === MENSAGENS ===\r\n    case RECEIVE_MESSAGE:\r\n      const newMessage = {\r\n        ...action.payload,\r\n        id: action.payload.id || `msg_${Date.now()}_${Math.random()}`,\r\n        timestamp: action.payload.timestamp || Date.now()\r\n      };\r\n      \r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages.slice(-state.chatSettings.maxMessages + 1),\r\n          newMessage\r\n        ]\r\n      };\r\n\r\n    case RECEIVE_PRIVATE_MESSAGE:\r\n      const newPrivateMessage = {\r\n        ...action.payload,\r\n        id: action.payload.id || `private_${Date.now()}_${Math.random()}`,\r\n        timestamp: action.payload.timestamp || Date.now()\r\n      };\r\n      \r\n      return {\r\n        ...state,\r\n        privateMessages: [\r\n          ...state.privateMessages.slice(-state.chatSettings.maxMessages + 1),\r\n          newPrivateMessage\r\n        ]\r\n      };\r\n\r\n    case CLEAR_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: [],\r\n        privateMessages: []\r\n      };\r\n\r\n    // === STATUS DE DIGITAÇÃO ===\r\n    case RECEIVE_TYPING_STATUS:\r\n      const { userId, userName, isTyping } = action.payload;\r\n      \r\n      if (isTyping) {\r\n        // Adiciona ou atualiza status de digitação\r\n        return {\r\n          ...state,\r\n          typingUsers: [\r\n            ...state.typingUsers.filter(user => user.userId !== userId),\r\n            { userId, userName, isTyping: true, timestamp: Date.now() }\r\n          ]\r\n        };\r\n      } else {\r\n        // Remove status de digitação\r\n        return {\r\n          ...state,\r\n          typingUsers: state.typingUsers.filter(user => user.userId !== userId)\r\n        };\r\n      }\r\n\r\n    // === NOTIFICAÇÕES ===\r\n    case RECEIVE_USER_JOINED:\r\n    case RECEIVE_USER_LEFT:\r\n      const notification = {\r\n        id: `notification_${Date.now()}_${Math.random()}`,\r\n        type: action.type === RECEIVE_USER_JOINED ? 'user_joined' : 'user_left',\r\n        message: action.payload.message,\r\n        userId: action.payload.userId,\r\n        timestamp: action.payload.timestamp || Date.now()\r\n      };\r\n      \r\n      return {\r\n        ...state,\r\n        notifications: [\r\n          ...state.notifications.slice(-19), // Mantém apenas 20 notificações\r\n          notification\r\n        ]\r\n      };\r\n\r\n    case ADD_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: [\r\n          ...state.notifications.slice(-19),\r\n          {\r\n            id: action.payload.id || `notification_${Date.now()}`,\r\n            ...action.payload,\r\n            timestamp: action.payload.timestamp || Date.now()\r\n          }\r\n        ]\r\n      };\r\n\r\n    case REMOVE_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(notif => notif.id !== action.payload)\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// === SELETORES ===\r\nexport const selectOnlineUsers = (state) => state.communication?.onlineUsers || [];\r\nexport const selectMessages = (state) => state.communication?.messages || [];\r\nexport const selectPrivateMessages = (state) => state.communication?.privateMessages || [];\r\nexport const selectTypingUsers = (state) => state.communication?.typingUsers || [];\r\nexport const selectNotifications = (state) => state.communication?.notifications || [];\r\nexport const selectChatSettings = (state) => state.communication?.chatSettings || {};\r\n\r\n// Seletor para mensagens privadas de um usuário específico\r\nexport const selectPrivateMessagesWithUser = (state, userId) => {\r\n  const messages = selectPrivateMessages(state);\r\n  const currentUserId = state.socket?.id;\r\n  \r\n  return messages.filter(msg => \r\n    (msg.senderId === userId && msg.recipientId === currentUserId) ||\r\n    (msg.senderId === currentUserId && msg.recipientId === userId)\r\n  );\r\n};\r\n\r\n// Seletor para usuários online excluindo o usuário atual\r\nexport const selectOtherOnlineUsers = (state) => {\r\n  const onlineUsers = selectOnlineUsers(state);\r\n  const currentUserId = state.socket?.id;\r\n  \r\n  return onlineUsers.filter(user => user.id !== currentUserId);\r\n};\r\n\r\n// Seletor para contar mensagens não lidas\r\nexport const selectUnreadMessagesCount = (state) => {\r\n  const messages = selectMessages(state);\r\n  const privateMessages = selectPrivateMessages(state);\r\n  const currentUserId = state.socket?.id;\r\n  \r\n  // Implementar lógica de mensagens não lidas baseada em timestamp\r\n  // Por enquanto, retorna 0\r\n  return 0;\r\n};\r\n\r\n// === ACTION CREATORS ===\r\nexport const setOnlineUsers = (users) => ({\r\n  type: SET_ONLINE_USERS,\r\n  payload: users\r\n});\r\n\r\nexport const addOnlineUser = (user) => ({\r\n  type: ADD_ONLINE_USER,\r\n  payload: user\r\n});\r\n\r\nexport const removeOnlineUser = (userId) => ({\r\n  type: REMOVE_ONLINE_USER,\r\n  payload: userId\r\n});\r\n\r\nexport const receiveMessage = (message) => ({\r\n  type: RECEIVE_MESSAGE,\r\n  payload: message\r\n});\r\n\r\nexport const receivePrivateMessage = (message) => ({\r\n  type: RECEIVE_PRIVATE_MESSAGE,\r\n  payload: message\r\n});\r\n\r\nexport const updateUserStatus = (userId, status, lastSeen) => ({\r\n  type: UPDATE_USER_STATUS,\r\n  payload: { userId, status, lastSeen }\r\n});\r\n\r\nexport const receiveTypingStatus = (userId, userName, isTyping) => ({\r\n  type: RECEIVE_TYPING_STATUS,\r\n  payload: { userId, userName, isTyping }\r\n});\r\n\r\nexport const clearMessages = () => ({\r\n  type: CLEAR_MESSAGES\r\n});\r\n\r\nexport const addNotification = (notification) => ({\r\n  type: ADD_NOTIFICATION,\r\n  payload: notification\r\n});\r\n\r\nexport const removeNotification = (notificationId) => ({\r\n  type: REMOVE_NOTIFICATION,\r\n  payload: notificationId\r\n});"]},"metadata":{},"sourceType":"module"}