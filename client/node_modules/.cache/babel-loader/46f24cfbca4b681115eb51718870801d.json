{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nclass SoundfontProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadInstrument = instrumentName => {\n      // Re-trigger loading state\n      this.setState({\n        instrument: null\n      });\n      Soundfont.instrument(this.props.audioContext, instrumentName, {\n        format: this.props.format,\n        soundfont: this.props.soundfont,\n        nameToUrl: (name, soundfont, format) => {\n          return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\n        }\n      }).then(instrument => {\n        this.setState({\n          instrument\n        });\n      });\n    };\n\n    this.playNote = midiNumber => {\n      this.props.audioContext.resume().then(() => {\n        const audioNode = this.state.instrument.play(midiNumber);\n        this.setState({\n          activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n            [midiNumber]: audioNode\n          })\n        });\n      });\n    };\n\n    this.stopNote = midiNumber => {\n      this.props.audioContext.resume().then(() => {\n        if (!this.state.activeAudioNodes[midiNumber]) {\n          return;\n        }\n\n        const audioNode = this.state.activeAudioNodes[midiNumber];\n        audioNode.stop();\n        this.setState({\n          activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n            [midiNumber]: null\n          })\n        });\n      });\n    };\n\n    this.stopAllNotes = () => {\n      this.props.audioContext.resume().then(() => {\n        const activeAudioNodes = Object.values(this.state.activeAudioNodes);\n        activeAudioNodes.forEach(node => {\n          if (node) {\n            node.stop();\n          }\n        });\n        this.setState({\n          activeAudioNodes: {}\n        });\n      });\n    };\n\n    this.state = {\n      activeAudioNodes: {},\n      instrument: null\n    };\n  }\n\n  componentDidMount() {\n    this.loadInstrument(this.props.instrumentName);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.instrumentName !== this.props.instrumentName) {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }\n\n  render() {\n    return this.props.render({\n      isLoading: !this.state.instrument,\n      playNote: this.playNote,\n      stopNote: this.stopNote,\n      stopAllNotes: this.stopAllNotes\n    });\n  }\n\n}\n\nSoundfontProvider.propTypes = {\n  instrumentName: PropTypes.string.isRequired,\n  hostname: PropTypes.string.isRequired,\n  format: PropTypes.oneOf(['mp3', 'ogg']),\n  soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n  audioContext: PropTypes.instanceOf(window.AudioContext),\n  render: PropTypes.func\n};\nSoundfontProvider.defaultProps = {\n  format: 'mp3',\n  soundfont: 'MusyngKite',\n  instrumentName: 'acoustic_grand_piano'\n};\nexport default SoundfontProvider;","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/src/components/piano/SoundfontProvider.js"],"names":["React","PropTypes","Soundfont","SoundfontProvider","Component","constructor","props","loadInstrument","instrumentName","setState","instrument","audioContext","format","soundfont","nameToUrl","name","hostname","then","playNote","midiNumber","resume","audioNode","state","play","activeAudioNodes","Object","assign","stopNote","stop","stopAllNotes","values","forEach","node","componentDidMount","componentDidUpdate","prevProps","prevState","render","isLoading","propTypes","string","isRequired","oneOf","instanceOf","window","AudioContext","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Soundfont from 'soundfont-player';\r\n\r\nclass SoundfontProvider extends React.Component {\r\n  static propTypes = {\r\n    instrumentName: PropTypes.string.isRequired,\r\n    hostname: PropTypes.string.isRequired,\r\n    format: PropTypes.oneOf(['mp3', 'ogg']),\r\n    soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\r\n    audioContext: PropTypes.instanceOf(window.AudioContext),\r\n    render: PropTypes.func,\r\n  };\r\n\r\n  static defaultProps = {\r\n    format: 'mp3',\r\n    soundfont: 'MusyngKite',\r\n    instrumentName: 'acoustic_grand_piano',\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeAudioNodes: {},\r\n      instrument: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadInstrument(this.props.instrumentName);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.instrumentName !== this.props.instrumentName) {\r\n      this.loadInstrument(this.props.instrumentName);\r\n    }\r\n  }\r\n\r\n  loadInstrument = (instrumentName) => {\r\n    // Re-trigger loading state\r\n    this.setState({\r\n      instrument: null,\r\n    });\r\n    Soundfont.instrument(this.props.audioContext, instrumentName, {\r\n      format: this.props.format,\r\n      soundfont: this.props.soundfont,\r\n      nameToUrl: (name, soundfont, format) => {\r\n        return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\r\n      },\r\n    }).then((instrument) => {\r\n      this.setState({\r\n        instrument,\r\n      });\r\n    });\r\n  };\r\n\r\n  playNote = (midiNumber) => {\r\n    this.props.audioContext.resume().then(() => {\r\n      const audioNode = this.state.instrument.play(midiNumber);\r\n      this.setState({\r\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\r\n          [midiNumber]: audioNode,\r\n        }),\r\n      });\r\n    });\r\n  };\r\n\r\n  stopNote = (midiNumber) => {\r\n    this.props.audioContext.resume().then(() => {\r\n      if (!this.state.activeAudioNodes[midiNumber]) {\r\n        return;\r\n      }\r\n      const audioNode = this.state.activeAudioNodes[midiNumber];\r\n      audioNode.stop();\r\n      this.setState({\r\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\r\n          [midiNumber]: null,\r\n        }),\r\n      });\r\n    });\r\n  };\r\n\r\n  // Clear any residual notes that don't get called with stopNote\r\n  stopAllNotes = () => {\r\n    this.props.audioContext.resume().then(() => {\r\n      const activeAudioNodes = Object.values(this.state.activeAudioNodes);\r\n      activeAudioNodes.forEach((node) => {\r\n        if (node) {\r\n          node.stop();\r\n        }\r\n      });\r\n      this.setState({\r\n        activeAudioNodes: {},\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return this.props.render({\r\n      isLoading: !this.state.instrument,\r\n      playNote: this.playNote,\r\n      stopNote: this.stopNote,\r\n      stopAllNotes: this.stopAllNotes,\r\n    });\r\n  }\r\n}\r\n\r\nexport default SoundfontProvider;\r\n"]},"metadata":{},"sourceType":"module"}