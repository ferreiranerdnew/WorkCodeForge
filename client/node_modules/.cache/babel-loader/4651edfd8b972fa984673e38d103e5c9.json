{"ast":null,"code":"// middleware example link: https://gist.github.com/markerikson/3df1cf5abbac57820a20059287b4be58\nimport { wsEndpoint } from '../utils/constants';\nimport { io } from 'socket.io-client';\nimport { SET_VIDEO_PARTICIPANTS, SET_SOCKETID, USER_DISCONNECT } from '../reducers/mapReducer';\nexport const socketRTK = () => {\n  return storeAPI => {\n    const socket = io(wsEndpoint); // Armazena o socket ID no estado Redux\n\n    socket.on('connect', () => {\n      storeAPI.dispatch(SET_SOCKETID({\n        id: socket.id\n      }));\n    }); // Atualiza participantes do vídeo\n\n    socket.on('userList', users => {\n      if (Array.isArray(users)) {\n        storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\n      }\n    }); // Movimento de outro usuário\n\n    socket.on('movementMessage', arg => {\n      try {\n        const action = JSON.parse(arg);\n        storeAPI.dispatch(action);\n      } catch (err) {\n        console.error('Erro ao processar movementMessage:', err);\n      }\n    }); // Usuário desconectou\n\n    socket.on('userDisconnect', id => {\n      if (id) {\n        storeAPI.dispatch(USER_DISCONNECT(id));\n      }\n    }); // Anúncio recebido (broadcast)\n\n    socket.on('receivedAnnouncement', arg => {\n      try {\n        const action = JSON.parse(arg);\n        storeAPI.dispatch(action);\n      } catch (err) {\n        console.error('Erro ao processar receivedAnnouncement:', err);\n      }\n    }); // Mensagem direta recebida\n\n    socket.on('receiveDirect', arg => {\n      if ((arg === null || arg === void 0 ? void 0 : arg.type) && (arg === null || arg === void 0 ? void 0 : arg.payload)) {\n        storeAPI.dispatch(arg);\n      }\n    }); // Middleware redux: intercepta ações e envia pelo socket\n\n    return next => action => {\n      const result = next(action);\n\n      switch (action.type) {\n        case 'WALK':\n          socket.volatile.emit('movementMessage', JSON.stringify({\n            type: 'UPDATE_OTHERS',\n            payload: storeAPI.getState().players[action.payload.id]\n          }));\n          break;\n\n        case 'ANNOUNCEMENT':\n          socket.emit('announcement', JSON.stringify({\n            type: 'RECEIVED_ANNOUNCEMENT',\n            payload: storeAPI.getState().outgoingGif\n          }));\n          break;\n\n        case 'SEND_DIRECT':\n          socket.emit('sendDirect', {\n            type: 'RECEIVE_DIRECT',\n            payload: storeAPI.getState().outgoingGif\n          });\n          break;\n        // Você pode adicionar outros casos de envio aqui se necessário.\n      }\n\n      return result;\n    };\n  };\n};","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/src/middleware/socketRTK.js"],"names":["wsEndpoint","io","SET_VIDEO_PARTICIPANTS","SET_SOCKETID","USER_DISCONNECT","socketRTK","storeAPI","socket","on","dispatch","id","users","Array","isArray","arg","action","JSON","parse","err","console","error","type","payload","next","result","volatile","emit","stringify","getState","players","outgoingGif"],"mappings":"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","sourcesContent":["// middleware example link: https://gist.github.com/markerikson/3df1cf5abbac57820a20059287b4be58\r\nimport { wsEndpoint } from '../utils/constants';\r\nimport { io } from 'socket.io-client';\r\nimport {\r\n  SET_VIDEO_PARTICIPANTS,\r\n  SET_SOCKETID,\r\n  USER_DISCONNECT,\r\n} from '../reducers/mapReducer';\r\n\r\nexport const socketRTK = () => {\r\n  return (storeAPI) => {\r\n    const socket = io(wsEndpoint);\r\n\r\n    // Armazena o socket ID no estado Redux\r\n    socket.on('connect', () => {\r\n      storeAPI.dispatch(SET_SOCKETID({ id: socket.id }));\r\n    });\r\n\r\n    // Atualiza participantes do vídeo\r\n    socket.on('userList', (users) => {\r\n      if (Array.isArray(users)) {\r\n        storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\r\n      }\r\n    });\r\n\r\n    // Movimento de outro usuário\r\n    socket.on('movementMessage', (arg) => {\r\n      try {\r\n        const action = JSON.parse(arg);\r\n        storeAPI.dispatch(action);\r\n      } catch (err) {\r\n        console.error('Erro ao processar movementMessage:', err);\r\n      }\r\n    });\r\n\r\n    // Usuário desconectou\r\n    socket.on('userDisconnect', (id) => {\r\n      if (id) {\r\n        storeAPI.dispatch(USER_DISCONNECT(id));\r\n      }\r\n    });\r\n\r\n    // Anúncio recebido (broadcast)\r\n    socket.on('receivedAnnouncement', (arg) => {\r\n      try {\r\n        const action = JSON.parse(arg);\r\n        storeAPI.dispatch(action);\r\n      } catch (err) {\r\n        console.error('Erro ao processar receivedAnnouncement:', err);\r\n      }\r\n    });\r\n\r\n    // Mensagem direta recebida\r\n    socket.on('receiveDirect', (arg) => {\r\n      if (arg?.type && arg?.payload) {\r\n        storeAPI.dispatch(arg);\r\n      }\r\n    });\r\n\r\n    // Middleware redux: intercepta ações e envia pelo socket\r\n    return (next) => (action) => {\r\n      const result = next(action);\r\n\r\n      switch (action.type) {\r\n        case 'WALK':\r\n          socket.volatile.emit('movementMessage', JSON.stringify({\r\n            type: 'UPDATE_OTHERS',\r\n            payload: storeAPI.getState().players[action.payload.id],\r\n          }));\r\n          break;\r\n\r\n        case 'ANNOUNCEMENT':\r\n          socket.emit('announcement', JSON.stringify({\r\n            type: 'RECEIVED_ANNOUNCEMENT',\r\n            payload: storeAPI.getState().outgoingGif,\r\n          }));\r\n          break;\r\n\r\n        case 'SEND_DIRECT':\r\n          socket.emit('sendDirect', {\r\n            type: 'RECEIVE_DIRECT',\r\n            payload: storeAPI.getState().outgoingGif,\r\n          });\r\n          break;\r\n\r\n        // Você pode adicionar outros casos de envio aqui se necessário.\r\n      }\r\n\r\n      return result;\r\n    };\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}