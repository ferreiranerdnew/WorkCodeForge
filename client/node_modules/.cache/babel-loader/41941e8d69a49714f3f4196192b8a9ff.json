{"ast":null,"code":"// src/middleware/socketRTK.js\nimport { wsEndpoint } from '../utils/constants';\nimport { io } from 'socket.io-client';\nimport { createPeer, addPeer } from '../utils/peerManager';\nimport { SET_VIDEO_PARTICIPANTS, SET_SOCKETID, USER_DISCONNECT } from '../reducers/mapReducer';\nexport const socketRTK = () => {\n  return storeAPI => {\n    const socket = io(wsEndpoint, {\n      transports: ['websocket']\n    });\n    const peers = {}; // socketId => Peer instance\n    // Armazena o socket ID no Redux\n\n    socket.on('connect', () => {\n      storeAPI.dispatch(SET_SOCKETID({\n        id: socket.id\n      })); // Indica ao servidor que deseja participar da sala de vídeo\n\n      socket.emit('joinVideo');\n    }); // Recebe lista de participantes e atualiza estado\n\n    socket.on('userList', users => {\n      if (Array.isArray(users)) {\n        storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\n      }\n    }); // Quando um novo usuário inicia um peer com você\n\n    socket.on('sending-signal', ({\n      userToSignal,\n      callerID,\n      signal\n    }) => {\n      // Adiciona peer respondente\n      const peer = addPeer({\n        signal,\n        callerID\n      }, storeAPI.getState().video.localStream, socket);\n      peers[callerID] = peer;\n    }); // Quando um usuário retorna sinal\n\n    socket.on('returning-signal', ({\n      callerID,\n      signal\n    }) => {\n      const peer = peers[callerID];\n      if (peer) peer.signal(signal);\n    }); // Limpa peer ao desconectar\n\n    socket.on('userDisconnect', socketId => {\n      storeAPI.dispatch(USER_DISCONNECT(socketId));\n\n      if (peers[socketId]) {\n        peers[socketId].destroy();\n        delete peers[socketId];\n      }\n    }); // Outros eventos (movimento, GIFs, anúncios)\n\n    socket.on('movementMessage', arg => {\n      try {\n        const action = JSON.parse(arg);\n        storeAPI.dispatch(action);\n      } catch (err) {\n        console.error('Erro movementMessage:', err);\n      }\n    });\n    socket.on('receivedAnnouncement', arg => {\n      try {\n        const action = JSON.parse(arg);\n        storeAPI.dispatch(action);\n      } catch (err) {\n        console.error('Erro announcement:', err);\n      }\n    });\n    socket.on('receiveDirect', arg => {\n      if ((arg === null || arg === void 0 ? void 0 : arg.type) && (arg === null || arg === void 0 ? void 0 : arg.payload)) {\n        storeAPI.dispatch(arg);\n      }\n    }); // Middleware Redux: intercepta e envia ações\n\n    return next => action => {\n      const result = next(action);\n\n      switch (action.type) {\n        case 'JOIN_VIDEO':\n          // Criar peers iniciadores para cada participante\n          const {\n            video\n          } = storeAPI.getState();\n          video.socketArr.forEach(userId => {\n            if (userId !== socket.id && !peers[userId]) {\n              const peer = createPeer(userId, socket.id, video.localStream, socket);\n              peers[userId] = peer;\n            }\n          });\n          break;\n\n        case 'WALK':\n          socket.volatile.emit('movementMessage', JSON.stringify({\n            type: 'UPDATE_OTHERS',\n            payload: storeAPI.getState().players[action.payload.id]\n          }));\n          break;\n\n        case 'ANNOUNCEMENT':\n          socket.emit('announcement', JSON.stringify({\n            type: 'RECEIVED_ANNOUNCEMENT',\n            payload: storeAPI.getState().outgoingGif\n          }));\n          break;\n\n        case 'SEND_DIRECT':\n          socket.emit('sendDirect', {\n            type: 'RECEIVE_DIRECT',\n            payload: storeAPI.getState().outgoingGif\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      return result;\n    };\n  };\n};","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/src/middleware/socketRTK.js"],"names":["wsEndpoint","io","createPeer","addPeer","SET_VIDEO_PARTICIPANTS","SET_SOCKETID","USER_DISCONNECT","socketRTK","storeAPI","socket","transports","peers","on","dispatch","id","emit","users","Array","isArray","userToSignal","callerID","signal","peer","getState","video","localStream","socketId","destroy","arg","action","JSON","parse","err","console","error","type","payload","next","result","socketArr","forEach","userId","volatile","stringify","players","outgoingGif"],"mappings":"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","sourcesContent":["// src/middleware/socketRTK.js\r\nimport { wsEndpoint } from '../utils/constants';\r\nimport { io } from 'socket.io-client';\r\nimport { createPeer, addPeer } from '../utils/peerManager';\r\nimport {\r\n  SET_VIDEO_PARTICIPANTS,\r\n  SET_SOCKETID,\r\n  USER_DISCONNECT,\r\n} from '../reducers/mapReducer';\r\n\r\nexport const socketRTK = () => {\r\n  return (storeAPI) => {\r\n    const socket = io(wsEndpoint, { transports: ['websocket'] });\r\n    const peers = {}; // socketId => Peer instance\r\n\r\n    // Armazena o socket ID no Redux\r\n    socket.on('connect', () => {\r\n      storeAPI.dispatch(SET_SOCKETID({ id: socket.id }));\r\n      // Indica ao servidor que deseja participar da sala de vídeo\r\n      socket.emit('joinVideo');\r\n    });\r\n\r\n    // Recebe lista de participantes e atualiza estado\r\n    socket.on('userList', (users) => {\r\n      if (Array.isArray(users)) {\r\n        storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\r\n      }\r\n    });\r\n\r\n    // Quando um novo usuário inicia um peer com você\r\n    socket.on('sending-signal', ({ userToSignal, callerID, signal }) => {\r\n      // Adiciona peer respondente\r\n      const peer = addPeer({ signal, callerID }, storeAPI.getState().video.localStream, socket);\r\n      peers[callerID] = peer;\r\n    });\r\n\r\n    // Quando um usuário retorna sinal\r\n    socket.on('returning-signal', ({ callerID, signal }) => {\r\n      const peer = peers[callerID];\r\n      if (peer) peer.signal(signal);\r\n    });\r\n\r\n    // Limpa peer ao desconectar\r\n    socket.on('userDisconnect', (socketId) => {\r\n      storeAPI.dispatch(USER_DISCONNECT(socketId));\r\n      if (peers[socketId]) {\r\n        peers[socketId].destroy();\r\n        delete peers[socketId];\r\n      }\r\n    });\r\n\r\n    // Outros eventos (movimento, GIFs, anúncios)\r\n    socket.on('movementMessage', (arg) => {\r\n      try {\r\n        const action = JSON.parse(arg);\r\n        storeAPI.dispatch(action);\r\n      } catch (err) {\r\n        console.error('Erro movementMessage:', err);\r\n      }\r\n    });\r\n    socket.on('receivedAnnouncement', (arg) => {\r\n      try {\r\n        const action = JSON.parse(arg);\r\n        storeAPI.dispatch(action);\r\n      } catch (err) {\r\n        console.error('Erro announcement:', err);\r\n      }\r\n    });\r\n    socket.on('receiveDirect', (arg) => {\r\n      if (arg?.type && arg?.payload) {\r\n        storeAPI.dispatch(arg);\r\n      }\r\n    });\r\n\r\n    // Middleware Redux: intercepta e envia ações\r\n    return (next) => (action) => {\r\n      const result = next(action);\r\n      switch (action.type) {\r\n        case 'JOIN_VIDEO':\r\n          // Criar peers iniciadores para cada participante\r\n          const { video } = storeAPI.getState();\r\n          video.socketArr.forEach((userId) => {\r\n            if (userId !== socket.id && !peers[userId]) {\r\n              const peer = createPeer(userId, socket.id, video.localStream, socket);\r\n              peers[userId] = peer;\r\n            }\r\n          });\r\n          break;\r\n        case 'WALK':\r\n          socket.volatile.emit('movementMessage', JSON.stringify({\r\n            type: 'UPDATE_OTHERS',\r\n            payload: storeAPI.getState().players[action.payload.id],\r\n          }));\r\n          break;\r\n        case 'ANNOUNCEMENT':\r\n          socket.emit('announcement', JSON.stringify({\r\n            type: 'RECEIVED_ANNOUNCEMENT',\r\n            payload: storeAPI.getState().outgoingGif,\r\n          }));\r\n          break;\r\n        case 'SEND_DIRECT':\r\n          socket.emit('sendDirect', {\r\n            type: 'RECEIVE_DIRECT',\r\n            payload: storeAPI.getState().outgoingGif,\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      return result;\r\n    };\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}