{"ast":null,"code":"// src/middleware/socketRTK.js\nimport { wsEndpoint } from '../utils/constants';\nimport { io } from 'socket.io-client';\nimport { createPeer, addPeer } from '../utils/peerManager';\nimport { SET_VIDEO_PARTICIPANTS, SET_SOCKETID, USER_DISCONNECT, SET_ONLINE_USERS, ADD_ONLINE_USER, REMOVE_ONLINE_USER, RECEIVE_MESSAGE, RECEIVE_PRIVATE_MESSAGE, UPDATE_USER_STATUS, RECEIVE_TYPING_STATUS, RECEIVE_USER_JOINED, RECEIVE_USER_LEFT } from '../reducers/mapReducer';\nexport const socketRTK = () => {\n  return storeAPI => {\n    const socket = io(wsEndpoint, {\n      transports: ['websocket']\n    });\n    const peers = {}; // socketId => Peer instance\n    // Armazena o socket ID no Redux\n\n    socket.on('connect', () => {\n      storeAPI.dispatch(SET_SOCKETID({\n        id: socket.id\n      })); // Indica ao servidor que deseja participar da sala de vídeo\n\n      socket.emit('joinVideo'); // Solicita lista de usuários online\n\n      socket.emit('requestOnlineUsers'); // Emite status de usuário conectado\n\n      socket.emit('userStatus', {\n        status: 'online',\n        userId: socket.id,\n        timestamp: Date.now()\n      });\n    }); // === EVENTOS DE VÍDEO ===\n    // Recebe lista de participantes de vídeo\n\n    socket.on('userList', users => {\n      if (Array.isArray(users)) {\n        storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\n      }\n    }); // Quando um novo usuário inicia um peer com você\n\n    socket.on('sending-signal', ({\n      userToSignal,\n      callerID,\n      signal\n    }) => {\n      const peer = addPeer({\n        signal,\n        callerID\n      }, storeAPI.getState().video.localStream, socket);\n      peers[callerID] = peer;\n    }); // Quando um usuário retorna sinal\n\n    socket.on('returning-signal', ({\n      callerID,\n      signal\n    }) => {\n      const peer = peers[callerID];\n      if (peer) peer.signal(signal);\n    }); // === EVENTOS DE USUÁRIOS ONLINE ===\n    // Lista completa de usuários online\n\n    socket.on('onlineUsers', users => {\n      storeAPI.dispatch(SET_ONLINE_USERS(users));\n    }); // Novo usuário entrou online\n\n    socket.on('userJoined', user => {\n      storeAPI.dispatch(ADD_ONLINE_USER(user));\n      storeAPI.dispatch(RECEIVE_USER_JOINED({\n        message: `${user.name || user.id} entrou na plataforma`,\n        userId: user.id,\n        timestamp: Date.now()\n      }));\n    }); // Usuário saiu\n\n    socket.on('userLeft', user => {\n      storeAPI.dispatch(REMOVE_ONLINE_USER(user.id));\n      storeAPI.dispatch(RECEIVE_USER_LEFT({\n        message: `${user.name || user.id} saiu da plataforma`,\n        userId: user.id,\n        timestamp: Date.now()\n      }));\n    }); // Status de usuário atualizado\n\n    socket.on('userStatusUpdate', ({\n      userId,\n      status,\n      lastSeen\n    }) => {\n      storeAPI.dispatch(UPDATE_USER_STATUS({\n        userId,\n        status,\n        lastSeen\n      }));\n    }); // === EVENTOS DE MENSAGENS ===\n    // Mensagem pública no chat geral\n\n    socket.on('publicMessage', messageData => {\n      storeAPI.dispatch(RECEIVE_MESSAGE({\n        id: messageData.id || Date.now(),\n        senderId: messageData.senderId,\n        senderName: messageData.senderName,\n        content: messageData.content,\n        timestamp: messageData.timestamp,\n        type: 'public'\n      }));\n    }); // Mensagem privada\n\n    socket.on('privateMessage', messageData => {\n      storeAPI.dispatch(RECEIVE_PRIVATE_MESSAGE({\n        id: messageData.id || Date.now(),\n        senderId: messageData.senderId,\n        senderName: messageData.senderName,\n        recipientId: messageData.recipientId,\n        content: messageData.content,\n        timestamp: messageData.timestamp,\n        type: 'private'\n      }));\n    }); // Status de digitação\n\n    socket.on('userTyping', ({\n      userId,\n      userName,\n      isTyping\n    }) => {\n      storeAPI.dispatch(RECEIVE_TYPING_STATUS({\n        userId,\n        userName,\n        isTyping,\n        timestamp: Date.now()\n      }));\n    }); // === EVENTOS DE DESCONEXÃO ===\n\n    socket.on('userDisconnect', socketId => {\n      storeAPI.dispatch(USER_DISCONNECT(socketId));\n      storeAPI.dispatch(REMOVE_ONLINE_USER(socketId));\n\n      if (peers[socketId]) {\n        peers[socketId].destroy();\n        delete peers[socketId];\n      }\n    }); // === EVENTOS EXISTENTES ===\n\n    socket.on('movementMessage', arg => {\n      try {\n        const action = JSON.parse(arg);\n        storeAPI.dispatch(action);\n      } catch (err) {\n        console.error('Erro movementMessage:', err);\n      }\n    });\n    socket.on('receivedAnnouncement', arg => {\n      try {\n        const action = JSON.parse(arg);\n        storeAPI.dispatch(action);\n      } catch (err) {\n        console.error('Erro announcement:', err);\n      }\n    });\n    socket.on('receiveDirect', arg => {\n      if ((arg === null || arg === void 0 ? void 0 : arg.type) && (arg === null || arg === void 0 ? void 0 : arg.payload)) {\n        storeAPI.dispatch(arg);\n      }\n    }); // === EVENTOS DE ERRO ===\n\n    socket.on('error', error => {\n      console.error('Socket error:', error);\n    });\n    socket.on('disconnect', () => {\n      console.log('Desconectado do servidor');\n    }); // === MIDDLEWARE REDUX ===\n\n    return next => action => {\n      const result = next(action);\n      const state = storeAPI.getState();\n\n      switch (action.type) {\n        case 'JOIN_VIDEO':\n          // Criar peers iniciadores para cada participante\n          const {\n            video\n          } = state;\n          video.socketArr.forEach(userId => {\n            if (userId !== socket.id && !peers[userId]) {\n              const peer = createPeer(userId, socket.id, video.localStream, socket);\n              peers[userId] = peer;\n            }\n          });\n          break;\n\n        case 'WALK':\n          socket.volatile.emit('movementMessage', JSON.stringify({\n            type: 'UPDATE_OTHERS',\n            payload: state.players[action.payload.id]\n          }));\n          break;\n\n        case 'ANNOUNCEMENT':\n          socket.emit('announcement', JSON.stringify({\n            type: 'RECEIVED_ANNOUNCEMENT',\n            payload: state.outgoingGif\n          }));\n          break;\n\n        case 'SEND_DIRECT':\n          socket.emit('sendDirect', {\n            type: 'RECEIVE_DIRECT',\n            payload: state.outgoingGif\n          });\n          break;\n        // === NOVAS AÇÕES DE COMUNICAÇÃO ===\n\n        case 'SEND_PUBLIC_MESSAGE':\n          socket.emit('publicMessage', {\n            content: action.payload.content,\n            senderId: socket.id,\n            senderName: action.payload.senderName || 'Anônimo',\n            timestamp: Date.now()\n          });\n          break;\n\n        case 'SEND_PRIVATE_MESSAGE':\n          socket.emit('privateMessage', {\n            content: action.payload.content,\n            recipientId: action.payload.recipientId,\n            senderId: socket.id,\n            senderName: action.payload.senderName || 'Anônimo',\n            timestamp: Date.now()\n          });\n          break;\n\n        case 'SET_TYPING_STATUS':\n          socket.emit('typing', {\n            isTyping: action.payload.isTyping,\n            userId: socket.id,\n            userName: action.payload.userName || 'Anônimo'\n          });\n          break;\n\n        case 'UPDATE_USER_PROFILE':\n          socket.emit('updateProfile', {\n            userId: socket.id,\n            profile: action.payload\n          });\n          break;\n\n        case 'REQUEST_USER_INFO':\n          socket.emit('requestUserInfo', {\n            userId: action.payload.userId\n          });\n          break;\n\n        case 'BLOCK_USER':\n          socket.emit('blockUser', {\n            userId: socket.id,\n            blockedUserId: action.payload.userId\n          });\n          break;\n\n        case 'UNBLOCK_USER':\n          socket.emit('unblockUser', {\n            userId: socket.id,\n            unblockedUserId: action.payload.userId\n          });\n          break;\n\n        case 'REPORT_USER':\n          socket.emit('reportUser', {\n            reporterId: socket.id,\n            reportedUserId: action.payload.userId,\n            reason: action.payload.reason\n          });\n          break;\n\n        case 'JOIN_ROOM':\n          socket.emit('joinRoom', {\n            roomId: action.payload.roomId,\n            userId: socket.id\n          });\n          break;\n\n        case 'LEAVE_ROOM':\n          socket.emit('leaveRoom', {\n            roomId: action.payload.roomId,\n            userId: socket.id\n          });\n          break;\n\n        case 'SEND_ROOM_MESSAGE':\n          socket.emit('roomMessage', {\n            roomId: action.payload.roomId,\n            content: action.payload.content,\n            senderId: socket.id,\n            senderName: action.payload.senderName || 'Anônimo',\n            timestamp: Date.now()\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      return result;\n    };\n  };\n}; // === FUNÇÕES AUXILIARES ===\n\nexport const createCommunicationActions = () => ({\n  // Mensagens públicas\n  sendPublicMessage: (content, senderName) => ({\n    type: 'SEND_PUBLIC_MESSAGE',\n    payload: {\n      content,\n      senderName\n    }\n  }),\n  // Mensagens privadas\n  sendPrivateMessage: (content, recipientId, senderName) => ({\n    type: 'SEND_PRIVATE_MESSAGE',\n    payload: {\n      content,\n      recipientId,\n      senderName\n    }\n  }),\n  // Status de digitação\n  setTypingStatus: (isTyping, userName) => ({\n    type: 'SET_TYPING_STATUS',\n    payload: {\n      isTyping,\n      userName\n    }\n  }),\n  // Atualizar perfil\n  updateUserProfile: profile => ({\n    type: 'UPDATE_USER_PROFILE',\n    payload: profile\n  }),\n  // Solicitar informações do usuário\n  requestUserInfo: userId => ({\n    type: 'REQUEST_USER_INFO',\n    payload: {\n      userId\n    }\n  }),\n  // Bloquear usuário\n  blockUser: userId => ({\n    type: 'BLOCK_USER',\n    payload: {\n      userId\n    }\n  }),\n  // Desbloquear usuário\n  unblockUser: userId => ({\n    type: 'UNBLOCK_USER',\n    payload: {\n      userId\n    }\n  }),\n  // Reportar usuário\n  reportUser: (userId, reason) => ({\n    type: 'REPORT_USER',\n    payload: {\n      userId,\n      reason\n    }\n  }),\n  // Gerenciar salas\n  joinRoom: roomId => ({\n    type: 'JOIN_ROOM',\n    payload: {\n      roomId\n    }\n  }),\n  leaveRoom: roomId => ({\n    type: 'LEAVE_ROOM',\n    payload: {\n      roomId\n    }\n  }),\n  sendRoomMessage: (roomId, content, senderName) => ({\n    type: 'SEND_ROOM_MESSAGE',\n    payload: {\n      roomId,\n      content,\n      senderName\n    }\n  })\n}); // === HOOKS PARA USAR NOS COMPONENTES ===\n\nexport const useCommunication = () => {\n  const actions = createCommunicationActions();\n  return { ...actions,\n    // Função para enviar mensagem com validação\n    sendMessage: (content, type = 'public', options = {}) => {\n      if (!content || content.trim() === '') {\n        throw new Error('Conteúdo da mensagem não pode estar vazio');\n      }\n\n      if (content.length > 1000) {\n        throw new Error('Mensagem muito longa (máximo 1000 caracteres)');\n      }\n\n      const trimmedContent = content.trim();\n\n      if (type === 'private') {\n        if (!options.recipientId) {\n          throw new Error('ID do destinatário é obrigatório para mensagens privadas');\n        }\n\n        return actions.sendPrivateMessage(trimmedContent, options.recipientId, options.senderName);\n      } else if (type === 'room') {\n        if (!options.roomId) {\n          throw new Error('ID da sala é obrigatório para mensagens de sala');\n        }\n\n        return actions.sendRoomMessage(options.roomId, trimmedContent, options.senderName);\n      } else {\n        return actions.sendPublicMessage(trimmedContent, options.senderName);\n      }\n    }\n  };\n};","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/src/middleware/socketRTK.js"],"names":["wsEndpoint","io","createPeer","addPeer","SET_VIDEO_PARTICIPANTS","SET_SOCKETID","USER_DISCONNECT","SET_ONLINE_USERS","ADD_ONLINE_USER","REMOVE_ONLINE_USER","RECEIVE_MESSAGE","RECEIVE_PRIVATE_MESSAGE","UPDATE_USER_STATUS","RECEIVE_TYPING_STATUS","RECEIVE_USER_JOINED","RECEIVE_USER_LEFT","socketRTK","storeAPI","socket","transports","peers","on","dispatch","id","emit","status","userId","timestamp","Date","now","users","Array","isArray","userToSignal","callerID","signal","peer","getState","video","localStream","user","message","name","lastSeen","messageData","senderId","senderName","content","type","recipientId","userName","isTyping","socketId","destroy","arg","action","JSON","parse","err","console","error","payload","log","next","result","state","socketArr","forEach","volatile","stringify","players","outgoingGif","profile","blockedUserId","unblockedUserId","reporterId","reportedUserId","reason","roomId","createCommunicationActions","sendPublicMessage","sendPrivateMessage","setTypingStatus","updateUserProfile","requestUserInfo","blockUser","unblockUser","reportUser","joinRoom","leaveRoom","sendRoomMessage","useCommunication","actions","sendMessage","options","trim","Error","length","trimmedContent"],"mappings":"AAAA;AACA,SAASA,UAAT,QAA2B,oBAA3B;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,sBAApC;AACA,SACEC,sBADF,EAEEC,YAFF,EAGEC,eAHF,EAIEC,gBAJF,EAKEC,eALF,EAMEC,kBANF,EAOEC,eAPF,EAQEC,uBARF,EASEC,kBATF,EAUEC,qBAVF,EAWEC,mBAXF,EAYEC,iBAZF,QAaO,wBAbP;AAeA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAQC,QAAD,IAAc;AACnB,UAAMC,MAAM,GAAGjB,EAAE,CAACD,UAAD,EAAa;AAAEmB,MAAAA,UAAU,EAAE,CAAC,WAAD;AAAd,KAAb,CAAjB;AACA,UAAMC,KAAK,GAAG,EAAd,CAFmB,CAED;AAElB;;AACAF,IAAAA,MAAM,CAACG,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBJ,MAAAA,QAAQ,CAACK,QAAT,CAAkBjB,YAAY,CAAC;AAAEkB,QAAAA,EAAE,EAAEL,MAAM,CAACK;AAAb,OAAD,CAA9B,EADyB,CAGzB;;AACAL,MAAAA,MAAM,CAACM,IAAP,CAAY,WAAZ,EAJyB,CAMzB;;AACAN,MAAAA,MAAM,CAACM,IAAP,CAAY,oBAAZ,EAPyB,CASzB;;AACAN,MAAAA,MAAM,CAACM,IAAP,CAAY,YAAZ,EAA0B;AACxBC,QAAAA,MAAM,EAAE,QADgB;AAExBC,QAAAA,MAAM,EAAER,MAAM,CAACK,EAFS;AAGxBI,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAHa,OAA1B;AAKD,KAfD,EALmB,CAsBnB;AACA;;AACAX,IAAAA,MAAM,CAACG,EAAP,CAAU,UAAV,EAAuBS,KAAD,IAAW;AAC/B,UAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBb,QAAAA,QAAQ,CAACK,QAAT,CAAkBlB,sBAAsB,CAAC0B,KAAD,CAAxC;AACD;AACF,KAJD,EAxBmB,CA8BnB;;AACAZ,IAAAA,MAAM,CAACG,EAAP,CAAU,gBAAV,EAA4B,CAAC;AAAEY,MAAAA,YAAF;AAAgBC,MAAAA,QAAhB;AAA0BC,MAAAA;AAA1B,KAAD,KAAwC;AAClE,YAAMC,IAAI,GAAGjC,OAAO,CAAC;AAAEgC,QAAAA,MAAF;AAAUD,QAAAA;AAAV,OAAD,EAAuBjB,QAAQ,CAACoB,QAAT,GAAoBC,KAApB,CAA0BC,WAAjD,EAA8DrB,MAA9D,CAApB;AACAE,MAAAA,KAAK,CAACc,QAAD,CAAL,GAAkBE,IAAlB;AACD,KAHD,EA/BmB,CAoCnB;;AACAlB,IAAAA,MAAM,CAACG,EAAP,CAAU,kBAAV,EAA8B,CAAC;AAAEa,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,KAA0B;AACtD,YAAMC,IAAI,GAAGhB,KAAK,CAACc,QAAD,CAAlB;AACA,UAAIE,IAAJ,EAAUA,IAAI,CAACD,MAAL,CAAYA,MAAZ;AACX,KAHD,EArCmB,CA0CnB;AACA;;AACAjB,IAAAA,MAAM,CAACG,EAAP,CAAU,aAAV,EAA0BS,KAAD,IAAW;AAClCb,MAAAA,QAAQ,CAACK,QAAT,CAAkBf,gBAAgB,CAACuB,KAAD,CAAlC;AACD,KAFD,EA5CmB,CAgDnB;;AACAZ,IAAAA,MAAM,CAACG,EAAP,CAAU,YAAV,EAAyBmB,IAAD,IAAU;AAChCvB,MAAAA,QAAQ,CAACK,QAAT,CAAkBd,eAAe,CAACgC,IAAD,CAAjC;AACAvB,MAAAA,QAAQ,CAACK,QAAT,CAAkBR,mBAAmB,CAAC;AACpC2B,QAAAA,OAAO,EAAG,GAAED,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACjB,EAAG,uBADG;AAEpCG,QAAAA,MAAM,EAAEc,IAAI,CAACjB,EAFuB;AAGpCI,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAHyB,OAAD,CAArC;AAKD,KAPD,EAjDmB,CA0DnB;;AACAX,IAAAA,MAAM,CAACG,EAAP,CAAU,UAAV,EAAuBmB,IAAD,IAAU;AAC9BvB,MAAAA,QAAQ,CAACK,QAAT,CAAkBb,kBAAkB,CAAC+B,IAAI,CAACjB,EAAN,CAApC;AACAN,MAAAA,QAAQ,CAACK,QAAT,CAAkBP,iBAAiB,CAAC;AAClC0B,QAAAA,OAAO,EAAG,GAAED,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACjB,EAAG,qBADC;AAElCG,QAAAA,MAAM,EAAEc,IAAI,CAACjB,EAFqB;AAGlCI,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAHuB,OAAD,CAAnC;AAKD,KAPD,EA3DmB,CAoEnB;;AACAX,IAAAA,MAAM,CAACG,EAAP,CAAU,kBAAV,EAA8B,CAAC;AAAEK,MAAAA,MAAF;AAAUD,MAAAA,MAAV;AAAkBkB,MAAAA;AAAlB,KAAD,KAAkC;AAC9D1B,MAAAA,QAAQ,CAACK,QAAT,CAAkBV,kBAAkB,CAAC;AACnCc,QAAAA,MADmC;AAEnCD,QAAAA,MAFmC;AAGnCkB,QAAAA;AAHmC,OAAD,CAApC;AAKD,KAND,EArEmB,CA6EnB;AACA;;AACAzB,IAAAA,MAAM,CAACG,EAAP,CAAU,eAAV,EAA4BuB,WAAD,IAAiB;AAC1C3B,MAAAA,QAAQ,CAACK,QAAT,CAAkBZ,eAAe,CAAC;AAChCa,QAAAA,EAAE,EAAEqB,WAAW,CAACrB,EAAZ,IAAkBK,IAAI,CAACC,GAAL,EADU;AAEhCgB,QAAAA,QAAQ,EAAED,WAAW,CAACC,QAFU;AAGhCC,QAAAA,UAAU,EAAEF,WAAW,CAACE,UAHQ;AAIhCC,QAAAA,OAAO,EAAEH,WAAW,CAACG,OAJW;AAKhCpB,QAAAA,SAAS,EAAEiB,WAAW,CAACjB,SALS;AAMhCqB,QAAAA,IAAI,EAAE;AAN0B,OAAD,CAAjC;AAQD,KATD,EA/EmB,CA0FnB;;AACA9B,IAAAA,MAAM,CAACG,EAAP,CAAU,gBAAV,EAA6BuB,WAAD,IAAiB;AAC3C3B,MAAAA,QAAQ,CAACK,QAAT,CAAkBX,uBAAuB,CAAC;AACxCY,QAAAA,EAAE,EAAEqB,WAAW,CAACrB,EAAZ,IAAkBK,IAAI,CAACC,GAAL,EADkB;AAExCgB,QAAAA,QAAQ,EAAED,WAAW,CAACC,QAFkB;AAGxCC,QAAAA,UAAU,EAAEF,WAAW,CAACE,UAHgB;AAIxCG,QAAAA,WAAW,EAAEL,WAAW,CAACK,WAJe;AAKxCF,QAAAA,OAAO,EAAEH,WAAW,CAACG,OALmB;AAMxCpB,QAAAA,SAAS,EAAEiB,WAAW,CAACjB,SANiB;AAOxCqB,QAAAA,IAAI,EAAE;AAPkC,OAAD,CAAzC;AASD,KAVD,EA3FmB,CAuGnB;;AACA9B,IAAAA,MAAM,CAACG,EAAP,CAAU,YAAV,EAAwB,CAAC;AAAEK,MAAAA,MAAF;AAAUwB,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,KAAD,KAAoC;AAC1DlC,MAAAA,QAAQ,CAACK,QAAT,CAAkBT,qBAAqB,CAAC;AACtCa,QAAAA,MADsC;AAEtCwB,QAAAA,QAFsC;AAGtCC,QAAAA,QAHsC;AAItCxB,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAJ2B,OAAD,CAAvC;AAMD,KAPD,EAxGmB,CAiHnB;;AACAX,IAAAA,MAAM,CAACG,EAAP,CAAU,gBAAV,EAA6B+B,QAAD,IAAc;AACxCnC,MAAAA,QAAQ,CAACK,QAAT,CAAkBhB,eAAe,CAAC8C,QAAD,CAAjC;AACAnC,MAAAA,QAAQ,CAACK,QAAT,CAAkBb,kBAAkB,CAAC2C,QAAD,CAApC;;AAEA,UAAIhC,KAAK,CAACgC,QAAD,CAAT,EAAqB;AACnBhC,QAAAA,KAAK,CAACgC,QAAD,CAAL,CAAgBC,OAAhB;AACA,eAAOjC,KAAK,CAACgC,QAAD,CAAZ;AACD;AACF,KARD,EAlHmB,CA4HnB;;AACAlC,IAAAA,MAAM,CAACG,EAAP,CAAU,iBAAV,EAA8BiC,GAAD,IAAS;AACpC,UAAI;AACF,cAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAf;AACArC,QAAAA,QAAQ,CAACK,QAAT,CAAkBiC,MAAlB;AACD,OAHD,CAGE,OAAOG,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd,EAAuCF,GAAvC;AACD;AACF,KAPD;AASAxC,IAAAA,MAAM,CAACG,EAAP,CAAU,sBAAV,EAAmCiC,GAAD,IAAS;AACzC,UAAI;AACF,cAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAf;AACArC,QAAAA,QAAQ,CAACK,QAAT,CAAkBiC,MAAlB;AACD,OAHD,CAGE,OAAOG,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd,EAAoCF,GAApC;AACD;AACF,KAPD;AASAxC,IAAAA,MAAM,CAACG,EAAP,CAAU,eAAV,EAA4BiC,GAAD,IAAS;AAClC,UAAI,CAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEN,IAAL,MAAaM,GAAb,aAAaA,GAAb,uBAAaA,GAAG,CAAEO,OAAlB,CAAJ,EAA+B;AAC7B5C,QAAAA,QAAQ,CAACK,QAAT,CAAkBgC,GAAlB;AACD;AACF,KAJD,EA/ImB,CAqJnB;;AACApC,IAAAA,MAAM,CAACG,EAAP,CAAU,OAAV,EAAoBuC,KAAD,IAAW;AAC5BD,MAAAA,OAAO,CAACC,KAAR,CAAc,eAAd,EAA+BA,KAA/B;AACD,KAFD;AAIA1C,IAAAA,MAAM,CAACG,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BsC,MAAAA,OAAO,CAACG,GAAR,CAAY,0BAAZ;AACD,KAFD,EA1JmB,CA8JnB;;AACA,WAAQC,IAAD,IAAWR,MAAD,IAAY;AAC3B,YAAMS,MAAM,GAAGD,IAAI,CAACR,MAAD,CAAnB;AACA,YAAMU,KAAK,GAAGhD,QAAQ,CAACoB,QAAT,EAAd;;AAEA,cAAQkB,MAAM,CAACP,IAAf;AACE,aAAK,YAAL;AACE;AACA,gBAAM;AAAEV,YAAAA;AAAF,cAAY2B,KAAlB;AACA3B,UAAAA,KAAK,CAAC4B,SAAN,CAAgBC,OAAhB,CAAyBzC,MAAD,IAAY;AAClC,gBAAIA,MAAM,KAAKR,MAAM,CAACK,EAAlB,IAAwB,CAACH,KAAK,CAACM,MAAD,CAAlC,EAA4C;AAC1C,oBAAMU,IAAI,GAAGlC,UAAU,CAACwB,MAAD,EAASR,MAAM,CAACK,EAAhB,EAAoBe,KAAK,CAACC,WAA1B,EAAuCrB,MAAvC,CAAvB;AACAE,cAAAA,KAAK,CAACM,MAAD,CAAL,GAAgBU,IAAhB;AACD;AACF,WALD;AAMA;;AAEF,aAAK,MAAL;AACElB,UAAAA,MAAM,CAACkD,QAAP,CAAgB5C,IAAhB,CAAqB,iBAArB,EAAwCgC,IAAI,CAACa,SAAL,CAAe;AACrDrB,YAAAA,IAAI,EAAE,eAD+C;AAErDa,YAAAA,OAAO,EAAEI,KAAK,CAACK,OAAN,CAAcf,MAAM,CAACM,OAAP,CAAetC,EAA7B;AAF4C,WAAf,CAAxC;AAIA;;AAEF,aAAK,cAAL;AACEL,UAAAA,MAAM,CAACM,IAAP,CAAY,cAAZ,EAA4BgC,IAAI,CAACa,SAAL,CAAe;AACzCrB,YAAAA,IAAI,EAAE,uBADmC;AAEzCa,YAAAA,OAAO,EAAEI,KAAK,CAACM;AAF0B,WAAf,CAA5B;AAIA;;AAEF,aAAK,aAAL;AACErD,UAAAA,MAAM,CAACM,IAAP,CAAY,YAAZ,EAA0B;AACxBwB,YAAAA,IAAI,EAAE,gBADkB;AAExBa,YAAAA,OAAO,EAAEI,KAAK,CAACM;AAFS,WAA1B;AAIA;AAEF;;AACA,aAAK,qBAAL;AACErD,UAAAA,MAAM,CAACM,IAAP,CAAY,eAAZ,EAA6B;AAC3BuB,YAAAA,OAAO,EAAEQ,MAAM,CAACM,OAAP,CAAed,OADG;AAE3BF,YAAAA,QAAQ,EAAE3B,MAAM,CAACK,EAFU;AAG3BuB,YAAAA,UAAU,EAAES,MAAM,CAACM,OAAP,CAAef,UAAf,IAA6B,SAHd;AAI3BnB,YAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAJgB,WAA7B;AAMA;;AAEF,aAAK,sBAAL;AACEX,UAAAA,MAAM,CAACM,IAAP,CAAY,gBAAZ,EAA8B;AAC5BuB,YAAAA,OAAO,EAAEQ,MAAM,CAACM,OAAP,CAAed,OADI;AAE5BE,YAAAA,WAAW,EAAEM,MAAM,CAACM,OAAP,CAAeZ,WAFA;AAG5BJ,YAAAA,QAAQ,EAAE3B,MAAM,CAACK,EAHW;AAI5BuB,YAAAA,UAAU,EAAES,MAAM,CAACM,OAAP,CAAef,UAAf,IAA6B,SAJb;AAK5BnB,YAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AALiB,WAA9B;AAOA;;AAEF,aAAK,mBAAL;AACEX,UAAAA,MAAM,CAACM,IAAP,CAAY,QAAZ,EAAsB;AACpB2B,YAAAA,QAAQ,EAAEI,MAAM,CAACM,OAAP,CAAeV,QADL;AAEpBzB,YAAAA,MAAM,EAAER,MAAM,CAACK,EAFK;AAGpB2B,YAAAA,QAAQ,EAAEK,MAAM,CAACM,OAAP,CAAeX,QAAf,IAA2B;AAHjB,WAAtB;AAKA;;AAEF,aAAK,qBAAL;AACEhC,UAAAA,MAAM,CAACM,IAAP,CAAY,eAAZ,EAA6B;AAC3BE,YAAAA,MAAM,EAAER,MAAM,CAACK,EADY;AAE3BiD,YAAAA,OAAO,EAAEjB,MAAM,CAACM;AAFW,WAA7B;AAIA;;AAEF,aAAK,mBAAL;AACE3C,UAAAA,MAAM,CAACM,IAAP,CAAY,iBAAZ,EAA+B;AAC7BE,YAAAA,MAAM,EAAE6B,MAAM,CAACM,OAAP,CAAenC;AADM,WAA/B;AAGA;;AAEF,aAAK,YAAL;AACER,UAAAA,MAAM,CAACM,IAAP,CAAY,WAAZ,EAAyB;AACvBE,YAAAA,MAAM,EAAER,MAAM,CAACK,EADQ;AAEvBkD,YAAAA,aAAa,EAAElB,MAAM,CAACM,OAAP,CAAenC;AAFP,WAAzB;AAIA;;AAEF,aAAK,cAAL;AACER,UAAAA,MAAM,CAACM,IAAP,CAAY,aAAZ,EAA2B;AACzBE,YAAAA,MAAM,EAAER,MAAM,CAACK,EADU;AAEzBmD,YAAAA,eAAe,EAAEnB,MAAM,CAACM,OAAP,CAAenC;AAFP,WAA3B;AAIA;;AAEF,aAAK,aAAL;AACER,UAAAA,MAAM,CAACM,IAAP,CAAY,YAAZ,EAA0B;AACxBmD,YAAAA,UAAU,EAAEzD,MAAM,CAACK,EADK;AAExBqD,YAAAA,cAAc,EAAErB,MAAM,CAACM,OAAP,CAAenC,MAFP;AAGxBmD,YAAAA,MAAM,EAAEtB,MAAM,CAACM,OAAP,CAAegB;AAHC,WAA1B;AAKA;;AAEF,aAAK,WAAL;AACE3D,UAAAA,MAAM,CAACM,IAAP,CAAY,UAAZ,EAAwB;AACtBsD,YAAAA,MAAM,EAAEvB,MAAM,CAACM,OAAP,CAAeiB,MADD;AAEtBpD,YAAAA,MAAM,EAAER,MAAM,CAACK;AAFO,WAAxB;AAIA;;AAEF,aAAK,YAAL;AACEL,UAAAA,MAAM,CAACM,IAAP,CAAY,WAAZ,EAAyB;AACvBsD,YAAAA,MAAM,EAAEvB,MAAM,CAACM,OAAP,CAAeiB,MADA;AAEvBpD,YAAAA,MAAM,EAAER,MAAM,CAACK;AAFQ,WAAzB;AAIA;;AAEF,aAAK,mBAAL;AACEL,UAAAA,MAAM,CAACM,IAAP,CAAY,aAAZ,EAA2B;AACzBsD,YAAAA,MAAM,EAAEvB,MAAM,CAACM,OAAP,CAAeiB,MADE;AAEzB/B,YAAAA,OAAO,EAAEQ,MAAM,CAACM,OAAP,CAAed,OAFC;AAGzBF,YAAAA,QAAQ,EAAE3B,MAAM,CAACK,EAHQ;AAIzBuB,YAAAA,UAAU,EAAES,MAAM,CAACM,OAAP,CAAef,UAAf,IAA6B,SAJhB;AAKzBnB,YAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AALc,WAA3B;AAOA;;AAEF;AACE;AAzHJ;;AA4HA,aAAOmC,MAAP;AACD,KAjID;AAkID,GAjSD;AAkSD,CAnSM,C,CAqSP;;AACA,OAAO,MAAMe,0BAA0B,GAAG,OAAO;AAC/C;AACAC,EAAAA,iBAAiB,EAAE,CAACjC,OAAD,EAAUD,UAAV,MAA0B;AAC3CE,IAAAA,IAAI,EAAE,qBADqC;AAE3Ca,IAAAA,OAAO,EAAE;AAAEd,MAAAA,OAAF;AAAWD,MAAAA;AAAX;AAFkC,GAA1B,CAF4B;AAO/C;AACAmC,EAAAA,kBAAkB,EAAE,CAAClC,OAAD,EAAUE,WAAV,EAAuBH,UAAvB,MAAuC;AACzDE,IAAAA,IAAI,EAAE,sBADmD;AAEzDa,IAAAA,OAAO,EAAE;AAAEd,MAAAA,OAAF;AAAWE,MAAAA,WAAX;AAAwBH,MAAAA;AAAxB;AAFgD,GAAvC,CAR2B;AAa/C;AACAoC,EAAAA,eAAe,EAAE,CAAC/B,QAAD,EAAWD,QAAX,MAAyB;AACxCF,IAAAA,IAAI,EAAE,mBADkC;AAExCa,IAAAA,OAAO,EAAE;AAAEV,MAAAA,QAAF;AAAYD,MAAAA;AAAZ;AAF+B,GAAzB,CAd8B;AAmB/C;AACAiC,EAAAA,iBAAiB,EAAGX,OAAD,KAAc;AAC/BxB,IAAAA,IAAI,EAAE,qBADyB;AAE/Ba,IAAAA,OAAO,EAAEW;AAFsB,GAAd,CApB4B;AAyB/C;AACAY,EAAAA,eAAe,EAAG1D,MAAD,KAAa;AAC5BsB,IAAAA,IAAI,EAAE,mBADsB;AAE5Ba,IAAAA,OAAO,EAAE;AAAEnC,MAAAA;AAAF;AAFmB,GAAb,CA1B8B;AA+B/C;AACA2D,EAAAA,SAAS,EAAG3D,MAAD,KAAa;AACtBsB,IAAAA,IAAI,EAAE,YADgB;AAEtBa,IAAAA,OAAO,EAAE;AAAEnC,MAAAA;AAAF;AAFa,GAAb,CAhCoC;AAqC/C;AACA4D,EAAAA,WAAW,EAAG5D,MAAD,KAAa;AACxBsB,IAAAA,IAAI,EAAE,cADkB;AAExBa,IAAAA,OAAO,EAAE;AAAEnC,MAAAA;AAAF;AAFe,GAAb,CAtCkC;AA2C/C;AACA6D,EAAAA,UAAU,EAAE,CAAC7D,MAAD,EAASmD,MAAT,MAAqB;AAC/B7B,IAAAA,IAAI,EAAE,aADyB;AAE/Ba,IAAAA,OAAO,EAAE;AAAEnC,MAAAA,MAAF;AAAUmD,MAAAA;AAAV;AAFsB,GAArB,CA5CmC;AAiD/C;AACAW,EAAAA,QAAQ,EAAGV,MAAD,KAAa;AACrB9B,IAAAA,IAAI,EAAE,WADe;AAErBa,IAAAA,OAAO,EAAE;AAAEiB,MAAAA;AAAF;AAFY,GAAb,CAlDqC;AAuD/CW,EAAAA,SAAS,EAAGX,MAAD,KAAa;AACtB9B,IAAAA,IAAI,EAAE,YADgB;AAEtBa,IAAAA,OAAO,EAAE;AAAEiB,MAAAA;AAAF;AAFa,GAAb,CAvDoC;AA4D/CY,EAAAA,eAAe,EAAE,CAACZ,MAAD,EAAS/B,OAAT,EAAkBD,UAAlB,MAAkC;AACjDE,IAAAA,IAAI,EAAE,mBAD2C;AAEjDa,IAAAA,OAAO,EAAE;AAAEiB,MAAAA,MAAF;AAAU/B,MAAAA,OAAV;AAAmBD,MAAAA;AAAnB;AAFwC,GAAlC;AA5D8B,CAAP,CAAnC,C,CAkEP;;AACA,OAAO,MAAM6C,gBAAgB,GAAG,MAAM;AACpC,QAAMC,OAAO,GAAGb,0BAA0B,EAA1C;AAEA,SAAO,EACL,GAAGa,OADE;AAEL;AACAC,IAAAA,WAAW,EAAE,CAAC9C,OAAD,EAAUC,IAAI,GAAG,QAAjB,EAA2B8C,OAAO,GAAG,EAArC,KAA4C;AACvD,UAAI,CAAC/C,OAAD,IAAYA,OAAO,CAACgD,IAAR,OAAmB,EAAnC,EAAuC;AACrC,cAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,UAAIjD,OAAO,CAACkD,MAAR,GAAiB,IAArB,EAA2B;AACzB,cAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,YAAME,cAAc,GAAGnD,OAAO,CAACgD,IAAR,EAAvB;;AAEA,UAAI/C,IAAI,KAAK,SAAb,EAAwB;AACtB,YAAI,CAAC8C,OAAO,CAAC7C,WAAb,EAA0B;AACxB,gBAAM,IAAI+C,KAAJ,CAAU,0DAAV,CAAN;AACD;;AACD,eAAOJ,OAAO,CAACX,kBAAR,CAA2BiB,cAA3B,EAA2CJ,OAAO,CAAC7C,WAAnD,EAAgE6C,OAAO,CAAChD,UAAxE,CAAP;AACD,OALD,MAKO,IAAIE,IAAI,KAAK,MAAb,EAAqB;AAC1B,YAAI,CAAC8C,OAAO,CAAChB,MAAb,EAAqB;AACnB,gBAAM,IAAIkB,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACD,eAAOJ,OAAO,CAACF,eAAR,CAAwBI,OAAO,CAAChB,MAAhC,EAAwCoB,cAAxC,EAAwDJ,OAAO,CAAChD,UAAhE,CAAP;AACD,OALM,MAKA;AACL,eAAO8C,OAAO,CAACZ,iBAAR,CAA0BkB,cAA1B,EAA0CJ,OAAO,CAAChD,UAAlD,CAAP;AACD;AACF;AA3BI,GAAP;AA6BD,CAhCM","sourcesContent":["// src/middleware/socketRTK.js\r\nimport { wsEndpoint } from '../utils/constants';\r\nimport { io } from 'socket.io-client';\r\nimport { createPeer, addPeer } from '../utils/peerManager';\r\nimport {\r\n  SET_VIDEO_PARTICIPANTS,\r\n  SET_SOCKETID,\r\n  USER_DISCONNECT,\r\n  SET_ONLINE_USERS,\r\n  ADD_ONLINE_USER,\r\n  REMOVE_ONLINE_USER,\r\n  RECEIVE_MESSAGE,\r\n  RECEIVE_PRIVATE_MESSAGE,\r\n  UPDATE_USER_STATUS,\r\n  RECEIVE_TYPING_STATUS,\r\n  RECEIVE_USER_JOINED,\r\n  RECEIVE_USER_LEFT,\r\n} from '../reducers/mapReducer';\r\n\r\nexport const socketRTK = () => {\r\n  return (storeAPI) => {\r\n    const socket = io(wsEndpoint, { transports: ['websocket'] });\r\n    const peers = {}; // socketId => Peer instance\r\n    \r\n    // Armazena o socket ID no Redux\r\n    socket.on('connect', () => {\r\n      storeAPI.dispatch(SET_SOCKETID({ id: socket.id }));\r\n      \r\n      // Indica ao servidor que deseja participar da sala de vídeo\r\n      socket.emit('joinVideo');\r\n      \r\n      // Solicita lista de usuários online\r\n      socket.emit('requestOnlineUsers');\r\n      \r\n      // Emite status de usuário conectado\r\n      socket.emit('userStatus', { \r\n        status: 'online', \r\n        userId: socket.id,\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n\r\n    // === EVENTOS DE VÍDEO ===\r\n    // Recebe lista de participantes de vídeo\r\n    socket.on('userList', (users) => {\r\n      if (Array.isArray(users)) {\r\n        storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\r\n      }\r\n    });\r\n\r\n    // Quando um novo usuário inicia um peer com você\r\n    socket.on('sending-signal', ({ userToSignal, callerID, signal }) => {\r\n      const peer = addPeer({ signal, callerID }, storeAPI.getState().video.localStream, socket);\r\n      peers[callerID] = peer;\r\n    });\r\n\r\n    // Quando um usuário retorna sinal\r\n    socket.on('returning-signal', ({ callerID, signal }) => {\r\n      const peer = peers[callerID];\r\n      if (peer) peer.signal(signal);\r\n    });\r\n\r\n    // === EVENTOS DE USUÁRIOS ONLINE ===\r\n    // Lista completa de usuários online\r\n    socket.on('onlineUsers', (users) => {\r\n      storeAPI.dispatch(SET_ONLINE_USERS(users));\r\n    });\r\n\r\n    // Novo usuário entrou online\r\n    socket.on('userJoined', (user) => {\r\n      storeAPI.dispatch(ADD_ONLINE_USER(user));\r\n      storeAPI.dispatch(RECEIVE_USER_JOINED({\r\n        message: `${user.name || user.id} entrou na plataforma`,\r\n        userId: user.id,\r\n        timestamp: Date.now()\r\n      }));\r\n    });\r\n\r\n    // Usuário saiu\r\n    socket.on('userLeft', (user) => {\r\n      storeAPI.dispatch(REMOVE_ONLINE_USER(user.id));\r\n      storeAPI.dispatch(RECEIVE_USER_LEFT({\r\n        message: `${user.name || user.id} saiu da plataforma`,\r\n        userId: user.id,\r\n        timestamp: Date.now()\r\n      }));\r\n    });\r\n\r\n    // Status de usuário atualizado\r\n    socket.on('userStatusUpdate', ({ userId, status, lastSeen }) => {\r\n      storeAPI.dispatch(UPDATE_USER_STATUS({\r\n        userId,\r\n        status,\r\n        lastSeen\r\n      }));\r\n    });\r\n\r\n    // === EVENTOS DE MENSAGENS ===\r\n    // Mensagem pública no chat geral\r\n    socket.on('publicMessage', (messageData) => {\r\n      storeAPI.dispatch(RECEIVE_MESSAGE({\r\n        id: messageData.id || Date.now(),\r\n        senderId: messageData.senderId,\r\n        senderName: messageData.senderName,\r\n        content: messageData.content,\r\n        timestamp: messageData.timestamp,\r\n        type: 'public'\r\n      }));\r\n    });\r\n\r\n    // Mensagem privada\r\n    socket.on('privateMessage', (messageData) => {\r\n      storeAPI.dispatch(RECEIVE_PRIVATE_MESSAGE({\r\n        id: messageData.id || Date.now(),\r\n        senderId: messageData.senderId,\r\n        senderName: messageData.senderName,\r\n        recipientId: messageData.recipientId,\r\n        content: messageData.content,\r\n        timestamp: messageData.timestamp,\r\n        type: 'private'\r\n      }));\r\n    });\r\n\r\n    // Status de digitação\r\n    socket.on('userTyping', ({ userId, userName, isTyping }) => {\r\n      storeAPI.dispatch(RECEIVE_TYPING_STATUS({\r\n        userId,\r\n        userName,\r\n        isTyping,\r\n        timestamp: Date.now()\r\n      }));\r\n    });\r\n\r\n    // === EVENTOS DE DESCONEXÃO ===\r\n    socket.on('userDisconnect', (socketId) => {\r\n      storeAPI.dispatch(USER_DISCONNECT(socketId));\r\n      storeAPI.dispatch(REMOVE_ONLINE_USER(socketId));\r\n      \r\n      if (peers[socketId]) {\r\n        peers[socketId].destroy();\r\n        delete peers[socketId];\r\n      }\r\n    });\r\n\r\n    // === EVENTOS EXISTENTES ===\r\n    socket.on('movementMessage', (arg) => {\r\n      try {\r\n        const action = JSON.parse(arg);\r\n        storeAPI.dispatch(action);\r\n      } catch (err) {\r\n        console.error('Erro movementMessage:', err);\r\n      }\r\n    });\r\n\r\n    socket.on('receivedAnnouncement', (arg) => {\r\n      try {\r\n        const action = JSON.parse(arg);\r\n        storeAPI.dispatch(action);\r\n      } catch (err) {\r\n        console.error('Erro announcement:', err);\r\n      }\r\n    });\r\n\r\n    socket.on('receiveDirect', (arg) => {\r\n      if (arg?.type && arg?.payload) {\r\n        storeAPI.dispatch(arg);\r\n      }\r\n    });\r\n\r\n    // === EVENTOS DE ERRO ===\r\n    socket.on('error', (error) => {\r\n      console.error('Socket error:', error);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Desconectado do servidor');\r\n    });\r\n\r\n    // === MIDDLEWARE REDUX ===\r\n    return (next) => (action) => {\r\n      const result = next(action);\r\n      const state = storeAPI.getState();\r\n\r\n      switch (action.type) {\r\n        case 'JOIN_VIDEO':\r\n          // Criar peers iniciadores para cada participante\r\n          const { video } = state;\r\n          video.socketArr.forEach((userId) => {\r\n            if (userId !== socket.id && !peers[userId]) {\r\n              const peer = createPeer(userId, socket.id, video.localStream, socket);\r\n              peers[userId] = peer;\r\n            }\r\n          });\r\n          break;\r\n\r\n        case 'WALK':\r\n          socket.volatile.emit('movementMessage', JSON.stringify({\r\n            type: 'UPDATE_OTHERS',\r\n            payload: state.players[action.payload.id],\r\n          }));\r\n          break;\r\n\r\n        case 'ANNOUNCEMENT':\r\n          socket.emit('announcement', JSON.stringify({\r\n            type: 'RECEIVED_ANNOUNCEMENT',\r\n            payload: state.outgoingGif,\r\n          }));\r\n          break;\r\n\r\n        case 'SEND_DIRECT':\r\n          socket.emit('sendDirect', {\r\n            type: 'RECEIVE_DIRECT',\r\n            payload: state.outgoingGif,\r\n          });\r\n          break;\r\n\r\n        // === NOVAS AÇÕES DE COMUNICAÇÃO ===\r\n        case 'SEND_PUBLIC_MESSAGE':\r\n          socket.emit('publicMessage', {\r\n            content: action.payload.content,\r\n            senderId: socket.id,\r\n            senderName: action.payload.senderName || 'Anônimo',\r\n            timestamp: Date.now()\r\n          });\r\n          break;\r\n\r\n        case 'SEND_PRIVATE_MESSAGE':\r\n          socket.emit('privateMessage', {\r\n            content: action.payload.content,\r\n            recipientId: action.payload.recipientId,\r\n            senderId: socket.id,\r\n            senderName: action.payload.senderName || 'Anônimo',\r\n            timestamp: Date.now()\r\n          });\r\n          break;\r\n\r\n        case 'SET_TYPING_STATUS':\r\n          socket.emit('typing', {\r\n            isTyping: action.payload.isTyping,\r\n            userId: socket.id,\r\n            userName: action.payload.userName || 'Anônimo'\r\n          });\r\n          break;\r\n\r\n        case 'UPDATE_USER_PROFILE':\r\n          socket.emit('updateProfile', {\r\n            userId: socket.id,\r\n            profile: action.payload\r\n          });\r\n          break;\r\n\r\n        case 'REQUEST_USER_INFO':\r\n          socket.emit('requestUserInfo', {\r\n            userId: action.payload.userId\r\n          });\r\n          break;\r\n\r\n        case 'BLOCK_USER':\r\n          socket.emit('blockUser', {\r\n            userId: socket.id,\r\n            blockedUserId: action.payload.userId\r\n          });\r\n          break;\r\n\r\n        case 'UNBLOCK_USER':\r\n          socket.emit('unblockUser', {\r\n            userId: socket.id,\r\n            unblockedUserId: action.payload.userId\r\n          });\r\n          break;\r\n\r\n        case 'REPORT_USER':\r\n          socket.emit('reportUser', {\r\n            reporterId: socket.id,\r\n            reportedUserId: action.payload.userId,\r\n            reason: action.payload.reason\r\n          });\r\n          break;\r\n\r\n        case 'JOIN_ROOM':\r\n          socket.emit('joinRoom', {\r\n            roomId: action.payload.roomId,\r\n            userId: socket.id\r\n          });\r\n          break;\r\n\r\n        case 'LEAVE_ROOM':\r\n          socket.emit('leaveRoom', {\r\n            roomId: action.payload.roomId,\r\n            userId: socket.id\r\n          });\r\n          break;\r\n\r\n        case 'SEND_ROOM_MESSAGE':\r\n          socket.emit('roomMessage', {\r\n            roomId: action.payload.roomId,\r\n            content: action.payload.content,\r\n            senderId: socket.id,\r\n            senderName: action.payload.senderName || 'Anônimo',\r\n            timestamp: Date.now()\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      return result;\r\n    };\r\n  };\r\n};\r\n\r\n// === FUNÇÕES AUXILIARES ===\r\nexport const createCommunicationActions = () => ({\r\n  // Mensagens públicas\r\n  sendPublicMessage: (content, senderName) => ({\r\n    type: 'SEND_PUBLIC_MESSAGE',\r\n    payload: { content, senderName }\r\n  }),\r\n\r\n  // Mensagens privadas\r\n  sendPrivateMessage: (content, recipientId, senderName) => ({\r\n    type: 'SEND_PRIVATE_MESSAGE',\r\n    payload: { content, recipientId, senderName }\r\n  }),\r\n\r\n  // Status de digitação\r\n  setTypingStatus: (isTyping, userName) => ({\r\n    type: 'SET_TYPING_STATUS',\r\n    payload: { isTyping, userName }\r\n  }),\r\n\r\n  // Atualizar perfil\r\n  updateUserProfile: (profile) => ({\r\n    type: 'UPDATE_USER_PROFILE',\r\n    payload: profile\r\n  }),\r\n\r\n  // Solicitar informações do usuário\r\n  requestUserInfo: (userId) => ({\r\n    type: 'REQUEST_USER_INFO',\r\n    payload: { userId }\r\n  }),\r\n\r\n  // Bloquear usuário\r\n  blockUser: (userId) => ({\r\n    type: 'BLOCK_USER',\r\n    payload: { userId }\r\n  }),\r\n\r\n  // Desbloquear usuário\r\n  unblockUser: (userId) => ({\r\n    type: 'UNBLOCK_USER',\r\n    payload: { userId }\r\n  }),\r\n\r\n  // Reportar usuário\r\n  reportUser: (userId, reason) => ({\r\n    type: 'REPORT_USER',\r\n    payload: { userId, reason }\r\n  }),\r\n\r\n  // Gerenciar salas\r\n  joinRoom: (roomId) => ({\r\n    type: 'JOIN_ROOM',\r\n    payload: { roomId }\r\n  }),\r\n\r\n  leaveRoom: (roomId) => ({\r\n    type: 'LEAVE_ROOM',\r\n    payload: { roomId }\r\n  }),\r\n\r\n  sendRoomMessage: (roomId, content, senderName) => ({\r\n    type: 'SEND_ROOM_MESSAGE',\r\n    payload: { roomId, content, senderName }\r\n  })\r\n});\r\n\r\n// === HOOKS PARA USAR NOS COMPONENTES ===\r\nexport const useCommunication = () => {\r\n  const actions = createCommunicationActions();\r\n  \r\n  return {\r\n    ...actions,\r\n    // Função para enviar mensagem com validação\r\n    sendMessage: (content, type = 'public', options = {}) => {\r\n      if (!content || content.trim() === '') {\r\n        throw new Error('Conteúdo da mensagem não pode estar vazio');\r\n      }\r\n\r\n      if (content.length > 1000) {\r\n        throw new Error('Mensagem muito longa (máximo 1000 caracteres)');\r\n      }\r\n\r\n      const trimmedContent = content.trim();\r\n\r\n      if (type === 'private') {\r\n        if (!options.recipientId) {\r\n          throw new Error('ID do destinatário é obrigatório para mensagens privadas');\r\n        }\r\n        return actions.sendPrivateMessage(trimmedContent, options.recipientId, options.senderName);\r\n      } else if (type === 'room') {\r\n        if (!options.roomId) {\r\n          throw new Error('ID da sala é obrigatório para mensagens de sala');\r\n        }\r\n        return actions.sendRoomMessage(options.roomId, trimmedContent, options.senderName);\r\n      } else {\r\n        return actions.sendPublicMessage(trimmedContent, options.senderName);\r\n      }\r\n    }\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}