{"ast":null,"code":"// middleware/socketRTK.js\nimport { io } from 'socket.io-client';\nimport { wsEndpoint } from '../utils/constants';\nimport Peer from 'simple-peer';\nimport { SET_VIDEO_PARTICIPANTS, SET_SOCKETID, USER_DISCONNECT } from '../reducers/mapReducer';\nexport const socketRTK = () => {\n  return storeAPI => {\n    const socket = io(wsEndpoint, {\n      transports: ['websocket'] // melhora estabilidade\n\n    }); // Armazenar stream e peers se for implementar WebRTC\n\n    let localStream = null;\n    const peers = {}; // key: socketId, value: Peer instance\n    // Evento: conexão estabelecida\n\n    socket.on('connect', () => {\n      storeAPI.dispatch(SET_SOCKETID({\n        id: socket.id\n      }));\n    }); // Evento: lista de usuários conectados\n\n    socket.on('userList', async users => {\n      storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users)); // Aqui poderia iniciar conexão WebRTC se necessário\n      // Exemplo básico (não obrigatório se você ainda não renderiza o vídeo):\n      // if (!localStream) localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n    }); // Evento: outro jogador se moveu\n\n    socket.on('movementMessage', arg => {\n      try {\n        storeAPI.dispatch(JSON.parse(arg)); // { type, payload }\n      } catch (err) {\n        console.error('Erro ao processar movimento:', err);\n      }\n    }); // Evento: usuário desconectou\n\n    socket.on('userDisconnect', socketId => {\n      storeAPI.dispatch(USER_DISCONNECT(socketId));\n    }); // Evento: anúncio global\n\n    socket.on('receivedAnnouncement', arg => {\n      try {\n        storeAPI.dispatch(JSON.parse(arg));\n      } catch (err) {\n        console.error('Erro ao processar announcement:', err);\n      }\n    }); // Evento: mensagem direta (ex: GIF)\n\n    socket.on('receiveDirect', arg => {\n      storeAPI.dispatch(arg);\n    }); // Função middleware Redux\n\n    return next => action => {\n      const newState = next(action);\n\n      switch (action.type) {\n        case 'WALK':\n          socket.volatile.emit('movementMessage', JSON.stringify({\n            type: 'UPDATE_OTHERS',\n            payload: storeAPI.getState().players[action.payload.id]\n          }));\n          break;\n\n        case 'ANNOUNCEMENT':\n          socket.emit('announcement', JSON.stringify({\n            type: 'RECEIVED_ANNOUNCEMENT',\n            payload: storeAPI.getState().outgoingGif\n          }));\n          break;\n\n        case 'SEND_DIRECT':\n          socket.emit('sendDirect', {\n            type: 'RECEIVE_DIRECT',\n            payload: storeAPI.getState().outgoingGif\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      return newState;\n    };\n  };\n};","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/src/middleware/socketRTK.js"],"names":["io","wsEndpoint","Peer","SET_VIDEO_PARTICIPANTS","SET_SOCKETID","USER_DISCONNECT","socketRTK","storeAPI","socket","transports","localStream","peers","on","dispatch","id","users","arg","JSON","parse","err","console","error","socketId","next","action","newState","type","volatile","emit","stringify","payload","getState","players","outgoingGif"],"mappings":"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","sourcesContent":["// middleware/socketRTK.js\r\nimport { io } from 'socket.io-client';\r\nimport { wsEndpoint } from '../utils/constants';\r\nimport Peer from 'simple-peer';\r\n\r\nimport {\r\n  SET_VIDEO_PARTICIPANTS,\r\n  SET_SOCKETID,\r\n  USER_DISCONNECT,\r\n} from '../reducers/mapReducer';\r\n\r\nexport const socketRTK = () => {\r\n  return (storeAPI) => {\r\n    const socket = io(wsEndpoint, {\r\n      transports: ['websocket'], // melhora estabilidade\r\n    });\r\n\r\n    // Armazenar stream e peers se for implementar WebRTC\r\n    let localStream = null;\r\n    const peers = {}; // key: socketId, value: Peer instance\r\n\r\n    // Evento: conexão estabelecida\r\n    socket.on('connect', () => {\r\n      storeAPI.dispatch(SET_SOCKETID({ id: socket.id }));\r\n    });\r\n\r\n    // Evento: lista de usuários conectados\r\n    socket.on('userList', async (users) => {\r\n      storeAPI.dispatch(SET_VIDEO_PARTICIPANTS(users));\r\n\r\n      // Aqui poderia iniciar conexão WebRTC se necessário\r\n      // Exemplo básico (não obrigatório se você ainda não renderiza o vídeo):\r\n      // if (!localStream) localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n    });\r\n\r\n    // Evento: outro jogador se moveu\r\n    socket.on('movementMessage', (arg) => {\r\n      try {\r\n        storeAPI.dispatch(JSON.parse(arg)); // { type, payload }\r\n      } catch (err) {\r\n        console.error('Erro ao processar movimento:', err);\r\n      }\r\n    });\r\n\r\n    // Evento: usuário desconectou\r\n    socket.on('userDisconnect', (socketId) => {\r\n      storeAPI.dispatch(USER_DISCONNECT(socketId));\r\n    });\r\n\r\n    // Evento: anúncio global\r\n    socket.on('receivedAnnouncement', (arg) => {\r\n      try {\r\n        storeAPI.dispatch(JSON.parse(arg));\r\n      } catch (err) {\r\n        console.error('Erro ao processar announcement:', err);\r\n      }\r\n    });\r\n\r\n    // Evento: mensagem direta (ex: GIF)\r\n    socket.on('receiveDirect', (arg) => {\r\n      storeAPI.dispatch(arg);\r\n    });\r\n\r\n    // Função middleware Redux\r\n    return (next) => (action) => {\r\n      const newState = next(action);\r\n\r\n      switch (action.type) {\r\n        case 'WALK':\r\n          socket.volatile.emit(\r\n            'movementMessage',\r\n            JSON.stringify({\r\n              type: 'UPDATE_OTHERS',\r\n              payload: storeAPI.getState().players[action.payload.id],\r\n            })\r\n          );\r\n          break;\r\n\r\n        case 'ANNOUNCEMENT':\r\n          socket.emit(\r\n            'announcement',\r\n            JSON.stringify({\r\n              type: 'RECEIVED_ANNOUNCEMENT',\r\n              payload: storeAPI.getState().outgoingGif,\r\n            })\r\n          );\r\n          break;\r\n\r\n        case 'SEND_DIRECT':\r\n          socket.emit('sendDirect', {\r\n            type: 'RECEIVE_DIRECT',\r\n            payload: storeAPI.getState().outgoingGif,\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      return newState;\r\n    };\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}