{"ast":null,"code":"import { FileLoader, Loader, ShapePath } from 'three';\n\nclass FontLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      let json;\n\n      try {\n        json = JSON.parse(text);\n      } catch (e) {\n        console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n        json = JSON.parse(text.substring(65, text.length - 2));\n      }\n\n      const font = scope.parse(json);\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n\n  parse(json) {\n    return new Font(json);\n  }\n\n} //\n\n\nclass Font {\n  constructor(data) {\n    this.type = 'Font';\n    this.data = data;\n  }\n\n  generateShapes(text, size = 100) {\n    const shapes = [];\n    const paths = createPaths(text, size, this.data);\n\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes());\n    }\n\n    return shapes;\n  }\n\n}\n\nfunction createPaths(text, size, data) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n      offsetY = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n      offsetX += ret.offsetX;\n      paths.push(ret.path);\n    }\n  }\n\n  return paths;\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n\n        case 'l':\n          // lineTo\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n\n        case 'q':\n          // quadraticCurveTo\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n\n        case 'b':\n          // bezierCurveTo\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          cpx2 = outline[i++] * scale + offsetX;\n          cpy2 = outline[i++] * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n\n  return {\n    offsetX: glyph.ha * scale,\n    path: path\n  };\n}\n\nFont.prototype.isFont = true;\nexport { FontLoader, Font };","map":{"version":3,"sources":["E:/000gitRepositorios/WorkCodeForge/client/node_modules/three/examples/jsm/loaders/FontLoader.js"],"names":["FileLoader","Loader","ShapePath","FontLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","json","JSON","parse","e","console","warn","substring","length","font","Font","data","type","generateShapes","size","shapes","paths","createPaths","p","pl","Array","prototype","push","apply","toShapes","chars","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","glyph","glyphs","error","familyName","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","action","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","isFont"],"mappings":"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","sourcesContent":["import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tconst font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nFont.prototype.isFont = true;\n\nexport { FontLoader, Font };\n"]},"metadata":{},"sourceType":"module"}