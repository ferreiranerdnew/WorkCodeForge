{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar react = require('react');\n\nvar Soundfont = _interopDefault(require('soundfont-player'));\n\nvar tone = require('tone');\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var runtime = function (exports) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n    function define(obj, key, value) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n      return obj[key];\n    }\n\n    try {\n      // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n      define({}, \"\");\n    } catch (err) {\n      define = function define(obj, key, value) {\n        return obj[key] = value;\n      };\n    }\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n\n    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: \"normal\",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: \"throw\",\n          arg: err\n        };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n\n    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n\n    function Generator() {}\n\n    function GeneratorFunction() {}\n\n    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n\n\n    var IteratorPrototype = {};\n    define(IteratorPrototype, iteratorSymbol, function () {\n      return this;\n    });\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = GeneratorFunctionPrototype;\n    define(Gp, \"constructor\", GeneratorFunctionPrototype);\n    define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        define(prototype, method, function (arg) {\n          return this._invoke(method, arg);\n        });\n      });\n    }\n\n    exports.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n\n    exports.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n      }\n\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    }; // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n\n\n    exports.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n\n    function AsyncIterator(generator, PromiseImpl) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n\n          if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n            return PromiseImpl.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return PromiseImpl.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function (error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      } // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n\n\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n      return this;\n    });\n    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n\n    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n      if (PromiseImpl === void 0) PromiseImpl = Promise;\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          } // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted; // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    } // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          // Note: [\"return\"] must be used for ES3 parsing compatibility.\n          if (delegate.iterator[\"return\"]) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n        context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      } // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n\n\n      context.delegate = null;\n      return ContinueSentinel;\n    } // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n\n\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n    define(Gp, iteratorSymbol, function () {\n      return this;\n    });\n    define(Gp, \"toString\", function () {\n      return \"[object Generator]\";\n    });\n\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    exports.keys = function (object) {\n      var keys = [];\n\n      for (var key in object) {\n        keys.push(key);\n      }\n\n      keys.reverse(); // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        } // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n\n\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined$1;\n            next.done = true;\n            return next;\n          };\n\n          return next.next = next;\n        }\n      } // Return an iterator with no values.\n\n\n      return {\n        next: doneResult\n      };\n    }\n\n    exports.values = values;\n\n    function doneResult() {\n      return {\n        value: undefined$1,\n        done: true\n      };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n      reset: function reset(skipTempReset) {\n        this.prev = 0;\n        this.next = 0; // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n        this.method = \"next\";\n        this.arg = undefined$1;\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n      stop: function stop() {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n      dispatchException: function dispatchException(exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n      abrupt: function abrupt(type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n      complete: function complete(record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n      finish: function finish(finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      \"catch\": function _catch(tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n\n            return thrown;\n          }\n        } // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n\n\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n\n        return ContinueSentinel;\n      }\n    }; // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n\n    return exports;\n  }( // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  module.exports);\n\n  try {\n    regeneratorRuntime = runtime;\n  } catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, in modern engines\n    // we can explicitly access globalThis. In older engines we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    if (typeof globalThis === \"object\") {\n      globalThis.regeneratorRuntime = runtime;\n    } else {\n      Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n    }\n  }\n});\n\nvar makePlayer = /*#__PURE__*/function () {\n  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(instrument, tuning, onChange) {\n    var _yield$instrument, _play, dispose, resolvers, playing, setPlaying;\n\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return instrument(tuning);\n\n          case 2:\n            _yield$instrument = _context.sent;\n            _play = _yield$instrument.play;\n            dispose = _yield$instrument.dispose;\n            resolvers = {};\n            playing = tuning.map(function () {\n              return false;\n            });\n\n            setPlaying = function setPlaying(string, value) {\n              if (playing[string] !== value) {\n                playing[string] = value;\n                setTimeout(function () {\n                  return onChange([].concat(playing));\n                }, 0);\n              }\n            };\n\n            return _context.abrupt(\"return\", {\n              play: function play(string, fret, when) {\n                if (when === void 0) {\n                  when = 0;\n                }\n\n                return new Promise(function (resolve) {\n                  var _resolvers$string;\n\n                  (_resolvers$string = resolvers[string]) == null ? void 0 : _resolvers$string.call(resolvers, when === 0);\n                  if (fret < 0) return resolve();\n                  var startTimeout = setTimeout(function () {\n                    return setPlaying(string, true);\n                  }, when * 1000);\n                  var endTimeout = setTimeout(resolvers[string] = function (change) {\n                    delete resolvers[string];\n                    clearTimeout(startTimeout);\n                    clearTimeout(endTimeout);\n                    resolve();\n                    if (!change) setPlaying(string, false);\n                  }, 3000 + when * 1000);\n\n                  _play(string, fret, when);\n                });\n              },\n              dispose: dispose\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction withSoundFont(instrumentName, options) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tuning) {\n      var audioContext, player;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              audioContext = new (window.AudioContext || window.webkitAudioContext)();\n              _context.next = 3;\n              return Soundfont.instrument(audioContext, instrumentName, _extends({}, options));\n\n            case 3:\n              player = _context.sent;\n              return _context.abrupt(\"return\", {\n                play: function play(string, fret, when) {\n                  if (when === void 0) {\n                    when = 0;\n                  }\n\n                  player.play(tuning[string] + fret, audioContext.currentTime + when, {\n                    duration: 4,\n                    gain: 4\n                  });\n                },\n                dispose: function dispose() {\n                  player.stop();\n                  audioContext.close();\n                }\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nvar toMidi = function toMidi(note) {\n  if (typeof note === 'string') return tone.Frequency(note).toMidi();\n  return note;\n};\n\nvar closest = function closest(midi, samples) {\n  var _ref;\n\n  var min = Object.keys(samples)[0];\n  Object.keys(samples).forEach(function (key) {\n    if (Math.abs(midi - toMidi(key)) < Math.abs(midi - toMidi(min))) {\n      min = key;\n    }\n  });\n  return _ref = {}, _ref[min] = samples[min], _ref;\n};\n\nfunction withSamples(samples) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tuning) {\n      var synths;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Promise.all(tuning.map(function (midi) {\n                return new Promise(function (resolve) {\n                  var synth = new tone.Sampler(closest(midi, samples), function () {\n                    return resolve(synth);\n                  }).toDestination();\n                });\n              }));\n\n            case 2:\n              synths = _context.sent;\n              return _context.abrupt(\"return\", {\n                play: function play(string, fret, when) {\n                  if (when === void 0) {\n                    when = 0;\n                  }\n\n                  synths[string].triggerAttackRelease(tone.Frequency(tuning[string] + fret, 'midi').toFrequency(), 4, tone.immediate() + when);\n                },\n                dispose: function dispose() {\n                  return synths.map(function (synth) {\n                    return synth.dispose();\n                  });\n                }\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n\nvar defaultInstrument = /*#__PURE__*/withSoundFont('acoustic_guitar_nylon');\n\nfunction useSound(props) {\n  var fretting = props.fretting,\n      tuning = props.tuning,\n      muted = props.muted,\n      _props$instrument = props.instrument,\n      instrument = _props$instrument === void 0 ? defaultInstrument : _props$instrument;\n\n  var _useState = react.useState(),\n      player = _useState[0],\n      setPlayer = _useState[1];\n\n  var _useState2 = react.useState(tuning.map(function () {\n    return false;\n  })),\n      playing = _useState2[0],\n      setPlaying = _useState2[1];\n\n  react.useEffect(function () {\n    var promise = makePlayer(instrument, tuning, setPlaying);\n    promise.then(setPlayer);\n    return function () {\n      setPlayer(undefined);\n      promise.then(function (player) {\n        player.dispose();\n      });\n    };\n  }, [instrument, tuning]);\n  var play = react.useCallback(function (string, when) {\n    var _fretting$string;\n\n    if (when === void 0) {\n      when = 0;\n    }\n\n    if (!muted) player == null ? void 0 : player.play(string, (_fretting$string = fretting[string]) != null ? _fretting$string : 0, when);\n  }, [muted, player, fretting]);\n  var strum = react.useCallback(function (up) {\n    return tuning.forEach(function (_, i) {\n      return play(!up ? tuning.length - i - 1 : i, 0.05 * i);\n    });\n  }, [tuning, play]);\n  return {\n    play: play,\n    strum: strum,\n    playing: playing,\n    loading: !player\n  };\n}\n\nexports.default = useSound;\nexports.withSamples = withSamples;\nexports.withSoundFont = withSoundFont;","map":{"version":3,"sources":["../../../node_modules/regenerator-runtime/runtime.js","../src/util/player.ts","../src/instruments/sound-font.ts","../src/instruments/samples.ts","../src/index.ts"],"names":["runtime","Op","Object","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","toStringTagSymbol","value","enumerable","configurable","writable","obj","define","protoGenerator","outerFn","generator","context","tryLocsList","makeInvokeMethod","exports","type","arg","fn","err","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","GeneratorFunctionPrototype","Generator","GeneratorFunction","ctor","genFun","__await","record","tryCatch","reject","result","invoke","resolve","previousPromise","callInvokeWithMethodAndArg","defineIteratorMethods","AsyncIterator","PromiseImpl","iter","wrap","state","method","doneResult","delegate","delegateResult","maybeInvokeDelegate","done","info","entry","tryLoc","locs","keys","key","next","iteratorMethod","iterable","isNaN","i","Context","constructor","reset","name","stop","rootEntry","rootRecord","dispatchException","handle","hasCatch","hasFinally","abrupt","finallyEntry","complete","finish","resetTryEntry","thrown","delegateYield","iterator","resultName","nextLoc","module","regeneratorRuntime","globalThis","Function","play","dispose","instrument","resolvers","playing","setPlaying","setTimeout","onChange","when","fret","startTimeout","endTimeout","clearTimeout","withSoundFont","instrumentName","options","audioContext","window","player","Soundfont","tuning","duration","gain","toMidi","Frequency","closest","min","Math","midi","samples","withSamples","synths","synth","Sampler","immediate","defaultInstrument","useSound","props","fretting","muted","setPlayer","useState","useEffect","promise","makePlayer","useCallback","strum","loading"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export type StringInstrument = (tuning: number[]) => Promise<{\n  play: (string: number, fret: number, when: number) => void\n  dispose: () => void\n}>\n\nexport type Player = {\n  play: (string: number, fret: number, when: number) => Promise<void>\n  dispose: () => void\n}\n\nexport default async (\n  instrument: StringInstrument,\n  tuning: number[],\n  onChange: (playing: boolean[]) => void\n): Promise<Player> => {\n  const { play, dispose } = await instrument(tuning)\n  const resolvers: Partial<{ [K: number]: (change?: boolean) => void }> = {}\n  const playing = tuning.map(() => false)\n  const setPlaying = (string: number, value: boolean) => {\n    if (playing[string] !== value) {\n      playing[string] = value\n      setTimeout(() => onChange([...playing]), 0)\n    }\n  }\n\n  return {\n    play: (string, fret, when = 0) =>\n      new Promise((resolve) => {\n        resolvers[string]?.(when === 0)\n        if (fret < 0) return resolve()\n        const startTimeout = setTimeout(\n          () => setPlaying(string, true),\n          when * 1000\n        )\n        const endTimeout = setTimeout(\n          (resolvers[string] = (change) => {\n            delete resolvers[string]\n            clearTimeout(startTimeout)\n            clearTimeout(endTimeout)\n            resolve()\n            if (!change) setPlaying(string, false)\n          }),\n          3000 + when * 1000\n        )\n        play(string, fret, when)\n      }),\n    dispose,\n  }\n}\n","import Soundfont, { InstrumentName } from 'soundfont-player'\nimport { StringInstrument } from '../util/player'\n\nexport default function withSoundFont(\n  instrumentName: InstrumentName,\n  options?: {\n    format?: 'mp3' | 'ogg'\n    soundfont?: 'FluidR3_GM' | 'MusyngKite'\n  }\n): StringInstrument {\n  return async (tuning) => {\n    const audioContext = new (window.AudioContext ||\n      ((window as any).webkitAudioContext as typeof AudioContext))()\n    const player = await Soundfont.instrument(audioContext, instrumentName, {\n      ...options,\n    })\n\n    return {\n      play: (string, fret, when = 0) => {\n        player.play(\n          (tuning[string] + fret) as any,\n          audioContext.currentTime + when,\n          {\n            duration: 4,\n            gain: 4,\n          }\n        )\n      },\n      dispose: () => {\n        player.stop()\n        audioContext.close()\n      },\n    }\n  }\n}\n","import { Frequency, Sampler, SamplerOptions, immediate } from 'tone'\nimport { StringInstrument } from '../util/player'\n\nconst toMidi = (note: string | number) => {\n  if (typeof note === 'string') return Frequency(note).toMidi()\n  return note\n}\n\nconst closest = (midi: number, samples: SamplerOptions['urls']) => {\n  let min = Object.keys(samples)[0]\n  Object.keys(samples).forEach((key) => {\n    if (Math.abs(midi - toMidi(key)) < Math.abs(midi - toMidi(min))) {\n      min = key\n    }\n  })\n  return { [min]: samples[min] }\n}\n\nexport default function withSamples(\n  samples: SamplerOptions['urls']\n): StringInstrument {\n  return async (tuning) => {\n    const synths = await Promise.all(\n      tuning.map(\n        (midi) =>\n          new Promise<Sampler>((resolve) => {\n            const synth: Sampler = new Sampler(closest(midi, samples), () =>\n              resolve(synth)\n            ).toDestination()\n          })\n      )\n    )\n    return {\n      play: (string, fret, when = 0) => {\n        synths[string].triggerAttackRelease(\n          Frequency(tuning[string] + fret, 'midi').toFrequency(),\n          4,\n          immediate() + when\n        )\n      },\n      dispose: () => synths.map((synth) => synth.dispose()),\n    }\n  }\n}\n","import { useEffect, useState, useCallback } from 'react'\nimport makePlayer, { Player, StringInstrument } from './util/player'\nimport withSoundFont from './instruments/sound-font'\nimport withSamples from './instruments/samples'\n\nexport { StringInstrument, withSoundFont, withSamples }\n\nconst defaultInstrument = withSoundFont('acoustic_guitar_nylon')\n\nexport default function useSound(props: {\n  instrument?: StringInstrument\n  fretting: number[]\n  tuning: number[]\n  muted?: boolean\n}) {\n  const { fretting, tuning, muted, instrument = defaultInstrument } = props\n  const [player, setPlayer] = useState<Player>()\n  const [playing, setPlaying] = useState(tuning.map(() => false))\n\n  useEffect(() => {\n    const promise = makePlayer(instrument, tuning, setPlaying)\n    promise.then(setPlayer)\n\n    return () => {\n      setPlayer(undefined)\n      promise.then((player) => {\n        player.dispose()\n      })\n    }\n  }, [instrument, tuning])\n\n  const play = useCallback(\n    (string: number, when: number = 0) => {\n      if (!muted) player?.play(string, fretting[string] ?? 0, when)\n    },\n    [muted, player, fretting]\n  )\n\n  const strum = useCallback(\n    (up?: boolean) =>\n      tuning.forEach((_, i) => play(!up ? tuning.length - i - 1 : i, 0.05 * i)),\n    [tuning, play]\n  )\n\n  return { play, strum, playing, loading: !player }\n}\n"]},"metadata":{},"sourceType":"script"}