{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { basemapWidth, basemapHeight, navBarHeight } from '../utils/constants';\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  let left, top;\n\n  if (width < basemapWidth) {\n    left = 0;\n  } else {\n    left = (width - basemapWidth) / 2;\n  }\n\n  if (height < basemapHeight + navBarHeight) {\n    top = navBarHeight;\n  } else {\n    top = (height - basemapHeight - navBarHeight) / 2 + navBarHeight;\n  }\n\n  return {\n    leftMargin: left,\n    topMargin: top,\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  _s();\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return windowDimensions;\n}\n\n_s(useWindowDimensions, \"XalQq70mIWrnM+6Jr3XornfayDc=\");","map":{"version":3,"sources":["C:/00001_Arquivos/0002_gitHub/WorkLand_old1/client/src/hooks/useWindowDimensions.js"],"names":["useEffect","useState","basemapWidth","basemapHeight","navBarHeight","getWindowDimensions","innerWidth","width","innerHeight","height","window","left","top","leftMargin","topMargin","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,YAAtC,QAA0D,oBAA1D;;AACA,SAASC,mBAAT,GAA+B;AAC7B,QAAM;AAAEC,IAAAA,UAAU,EAAEC,KAAd;AAAqBC,IAAAA,WAAW,EAAEC;AAAlC,MAA6CC,MAAnD;AACA,MAAIC,IAAJ,EAAUC,GAAV;;AACA,MAAIL,KAAK,GAAGL,YAAZ,EAA0B;AACxBS,IAAAA,IAAI,GAAG,CAAP;AACD,GAFD,MAEO;AACLA,IAAAA,IAAI,GAAG,CAACJ,KAAK,GAAGL,YAAT,IAAyB,CAAhC;AACD;;AACD,MAAIO,MAAM,GAAGN,aAAa,GAAGC,YAA7B,EAA2C;AACzCQ,IAAAA,GAAG,GAAGR,YAAN;AACD,GAFD,MAEO;AACLQ,IAAAA,GAAG,GAAG,CAACH,MAAM,GAAGN,aAAT,GAAyBC,YAA1B,IAA0C,CAA1C,GAA8CA,YAApD;AACD;;AACD,SAAO;AACLS,IAAAA,UAAU,EAAEF,IADP;AAELG,IAAAA,SAAS,EAAEF,GAFN;AAGLL,IAAAA,KAHK;AAILE,IAAAA;AAJK,GAAP;AAMD;;AAED,eAAe,SAASM,mBAAT,GAA+B;AAAA;;AAC5C,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0ChB,QAAQ,CACtDI,mBAAmB,EADmC,CAAxD;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,aAASkB,YAAT,GAAwB;AACtBD,MAAAA,mBAAmB,CAACZ,mBAAmB,EAApB,CAAnB;AACD;;AAEDK,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMR,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GAPQ,EAON,EAPM,CAAT;AASA,SAAOF,gBAAP;AACD;;GAfuBD,mB","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport { basemapWidth, basemapHeight, navBarHeight } from '../utils/constants';\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  let left, top;\r\n  if (width < basemapWidth) {\r\n    left = 0;\r\n  } else {\r\n    left = (width - basemapWidth) / 2;\r\n  }\r\n  if (height < basemapHeight + navBarHeight) {\r\n    top = navBarHeight;\r\n  } else {\r\n    top = (height - basemapHeight - navBarHeight) / 2 + navBarHeight;\r\n  }\r\n  return {\r\n    leftMargin: left,\r\n    topMargin: top,\r\n    width,\r\n    height,\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}