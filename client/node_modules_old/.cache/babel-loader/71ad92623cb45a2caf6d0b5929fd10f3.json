{"ast":null,"code":"import React, { useEffect, useRef, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { useStyle } from './style';\nimport { styles } from './indexStyles';\nimport SearchForm from './components/SearchForm/SearchForm';\nimport ImageItem from './components/ImageItem/ImageItem';\nimport PoweredByGiphy from './components/PoweredByGiphy/PoweredByGiphy';\nimport MasonryLayout from './components/MasonryLayout/MasonryLayout';\nimport Alert from './components/Alert/Alert';\nimport Spinner from './components/Spinner/Spinner';\nimport useSearchForm from './hooks/useSearchForm';\nimport useDebounce from './hooks/useDebounce';\nimport useMedia from './hooks/useMedia';\nimport useApi from './hooks/useApi';\nimport { getComponentWrapperWidth, getDefaultMasonryConfig, getMasonryConfigExceptLast, getMediaBreakpoints } from './utils/masonry';\n\nvar ReactGiphySearchBox = function ReactGiphySearchBox(_ref) {\n  var apiKey = _ref.apiKey,\n      autoFocus = _ref.autoFocus,\n      gifListHeight = _ref.gifListHeight,\n      gifPerPage = _ref.gifPerPage,\n      imageBackgroundColor = _ref.imageBackgroundColor,\n      imageRenditionFileType = _ref.imageRenditionFileType,\n      imageRenditionName = _ref.imageRenditionName,\n      library = _ref.library,\n      listItemClassName = _ref.listItemClassName,\n      listWrapperClassName = _ref.listWrapperClassName,\n      loadingImage = _ref.loadingImage,\n      masonryConfig = _ref.masonryConfig,\n      messageError = _ref.messageError,\n      messageLoading = _ref.messageLoading,\n      messageNoMatches = _ref.messageNoMatches,\n      onSearch = _ref.onSearch,\n      onSelect = _ref.onSelect,\n      poweredByGiphy = _ref.poweredByGiphy,\n      poweredByGiphyImage = _ref.poweredByGiphyImage,\n      rating = _ref.rating,\n      searchFormClassName = _ref.searchFormClassName,\n      searchPlaceholder = _ref.searchPlaceholder,\n      wrapperClassName = _ref.wrapperClassName;\n  useStyle('Index', styles);\n\n  var _useSearchForm = useSearchForm(),\n      query = _useSearchForm.query,\n      handleInputChange = _useSearchForm.handleInputChange,\n      handleSubmit = _useSearchForm.handleSubmit;\n\n  var debouncedQuery = useDebounce(query, 500);\n  var apiEndpoint = query ? 'search' : 'trending';\n\n  var apiUrl = function apiUrl(offset) {\n    return 'https://api.giphy.com/v1/' + library + '/' + apiEndpoint + '?api_key=' + apiKey + '&limit=' + gifPerPage + '&rating=' + rating + '&offset=' + offset + '&q=' + query;\n  };\n\n  var _useApi = useApi(),\n      _useApi$ = _useApi[0],\n      data = _useApi$.data,\n      loading = _useApi$.loading,\n      error = _useApi$.error,\n      lastPage = _useApi$.lastPage,\n      fetchImages = _useApi[1];\n\n  var masonryConfigMatchMedia = useMedia(getMediaBreakpoints(masonryConfig), getMasonryConfigExceptLast(masonryConfig), getDefaultMasonryConfig(masonryConfig)); // Fetch Giphy Api on component mount and on search query change\n\n  var _useState = useState(true),\n      firstRun = _useState[0],\n      setFirstRun = _useState[1];\n\n  var isFirstRun = useRef(true);\n  useEffect(function () {\n    fetchImages(apiUrl(0));\n    onSearch(query);\n\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      setFirstRun(false);\n    }\n  }, [debouncedQuery]);\n  return React.createElement('div', {\n    className: 'reactGiphySearchbox-componentWrapper' + (wrapperClassName ? ' ' + wrapperClassName : ''),\n    style: {\n      width: getComponentWrapperWidth(masonryConfigMatchMedia)\n    }\n  }, React.createElement(SearchForm, {\n    value: query,\n    setValue: handleInputChange,\n    onSubmit: handleSubmit,\n    loadingData: loading,\n    searchFormClassName: searchFormClassName,\n    placeholder: searchPlaceholder,\n    autoFocus: autoFocus\n  }), React.createElement('div', {\n    className: 'reactGiphySearchbox-listWrapper' + (listWrapperClassName ? ' ' + listWrapperClassName : ''),\n    style: {\n      height: gifListHeight\n    }\n  }, React.createElement(Alert, {\n    show: data.length === 0 && !loading && !error && !firstRun,\n    message: messageNoMatches\n  }), React.createElement(Alert, {\n    show: error,\n    message: messageError\n  }), React.createElement(Spinner, {\n    show: loading,\n    message: messageLoading,\n    image: loadingImage\n  }), React.createElement(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: function loadMore(page) {\n      return fetchImages(apiUrl(page * gifPerPage), true);\n    },\n    hasMore: !loading && !lastPage,\n    useWindow: false,\n    initialLoad: false,\n    loader: !firstRun && React.createElement('div', {\n      key: 'loading'\n    }, React.createElement(Spinner, {\n      show: loading,\n      message: messageLoading,\n      image: loadingImage\n    }))\n  }, data.length > 0 && React.createElement(MasonryLayout, {\n    sizes: masonryConfig\n  }, data.map(function (item) {\n    return React.createElement(ImageItem, {\n      item: item,\n      size: masonryConfigMatchMedia.imageWidth,\n      key: item.id,\n      listItemClassName: listItemClassName,\n      onSelect: onSelect,\n      backgroundColor: imageBackgroundColor,\n      imageRenditionName: imageRenditionName,\n      imageRenditionFileType: imageRenditionFileType\n    });\n  })))), poweredByGiphy && React.createElement(PoweredByGiphy, {\n    image: poweredByGiphyImage\n  }));\n};\n\nReactGiphySearchBox.defaultProps = {\n  autoFocus: false,\n  gifListHeight: '300px',\n  gifPerPage: 20,\n  imageBackgroundColor: '#eee',\n  imageRenditionFileType: 'gif',\n  imageRenditionName: 'fixed_width_downsampled',\n  library: 'gifs',\n  listItemClassName: '',\n  listWrapperClassName: '',\n  loadingImage: undefined,\n  masonryConfig: [{\n    columns: 2,\n    imageWidth: 120,\n    gutter: 5\n  }],\n  messageError: 'Oops! Something went wrong. Please, try again.',\n  messageLoading: 'Loading...',\n  messageNoMatches: 'No matches found.',\n  onSearch: function onSearch() {},\n  poweredByGiphy: true,\n  poweredByGiphyImage: undefined,\n  rating: 'g',\n  searchFormClassName: '',\n  searchPlaceholder: 'Search for GIFs',\n  wrapperClassName: ''\n};\nexport default ReactGiphySearchBox;","map":{"version":3,"sources":["C:/00001_Arquivos/0002_gitHub/WorkLand_old1/client/node_modules/react-giphy-searchbox/es/index.js"],"names":["React","useEffect","useRef","useState","InfiniteScroll","useStyle","styles","SearchForm","ImageItem","PoweredByGiphy","MasonryLayout","Alert","Spinner","useSearchForm","useDebounce","useMedia","useApi","getComponentWrapperWidth","getDefaultMasonryConfig","getMasonryConfigExceptLast","getMediaBreakpoints","ReactGiphySearchBox","_ref","apiKey","autoFocus","gifListHeight","gifPerPage","imageBackgroundColor","imageRenditionFileType","imageRenditionName","library","listItemClassName","listWrapperClassName","loadingImage","masonryConfig","messageError","messageLoading","messageNoMatches","onSearch","onSelect","poweredByGiphy","poweredByGiphyImage","rating","searchFormClassName","searchPlaceholder","wrapperClassName","_useSearchForm","query","handleInputChange","handleSubmit","debouncedQuery","apiEndpoint","apiUrl","offset","_useApi","_useApi$","data","loading","error","lastPage","fetchImages","masonryConfigMatchMedia","_useState","firstRun","setFirstRun","isFirstRun","current","createElement","className","style","width","value","setValue","onSubmit","loadingData","placeholder","height","show","length","message","image","pageStart","loadMore","page","hasMore","useWindow","initialLoad","loader","key","sizes","map","item","size","imageWidth","id","backgroundColor","defaultProps","undefined","columns","gutter"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { useStyle } from './style';\nimport { styles } from './indexStyles';\nimport SearchForm from './components/SearchForm/SearchForm';\nimport ImageItem from './components/ImageItem/ImageItem';\nimport PoweredByGiphy from './components/PoweredByGiphy/PoweredByGiphy';\nimport MasonryLayout from './components/MasonryLayout/MasonryLayout';\nimport Alert from './components/Alert/Alert';\nimport Spinner from './components/Spinner/Spinner';\nimport useSearchForm from './hooks/useSearchForm';\nimport useDebounce from './hooks/useDebounce';\nimport useMedia from './hooks/useMedia';\nimport useApi from './hooks/useApi';\nimport { getComponentWrapperWidth, getDefaultMasonryConfig, getMasonryConfigExceptLast, getMediaBreakpoints } from './utils/masonry';\n\nvar ReactGiphySearchBox = function ReactGiphySearchBox(_ref) {\n  var apiKey = _ref.apiKey,\n      autoFocus = _ref.autoFocus,\n      gifListHeight = _ref.gifListHeight,\n      gifPerPage = _ref.gifPerPage,\n      imageBackgroundColor = _ref.imageBackgroundColor,\n      imageRenditionFileType = _ref.imageRenditionFileType,\n      imageRenditionName = _ref.imageRenditionName,\n      library = _ref.library,\n      listItemClassName = _ref.listItemClassName,\n      listWrapperClassName = _ref.listWrapperClassName,\n      loadingImage = _ref.loadingImage,\n      masonryConfig = _ref.masonryConfig,\n      messageError = _ref.messageError,\n      messageLoading = _ref.messageLoading,\n      messageNoMatches = _ref.messageNoMatches,\n      onSearch = _ref.onSearch,\n      onSelect = _ref.onSelect,\n      poweredByGiphy = _ref.poweredByGiphy,\n      poweredByGiphyImage = _ref.poweredByGiphyImage,\n      rating = _ref.rating,\n      searchFormClassName = _ref.searchFormClassName,\n      searchPlaceholder = _ref.searchPlaceholder,\n      wrapperClassName = _ref.wrapperClassName;\n\n  useStyle('Index', styles);\n\n  var _useSearchForm = useSearchForm(),\n      query = _useSearchForm.query,\n      handleInputChange = _useSearchForm.handleInputChange,\n      handleSubmit = _useSearchForm.handleSubmit;\n\n  var debouncedQuery = useDebounce(query, 500);\n\n  var apiEndpoint = query ? 'search' : 'trending';\n  var apiUrl = function apiUrl(offset) {\n    return 'https://api.giphy.com/v1/' + library + '/' + apiEndpoint + '?api_key=' + apiKey + '&limit=' + gifPerPage + '&rating=' + rating + '&offset=' + offset + '&q=' + query;\n  };\n\n  var _useApi = useApi(),\n      _useApi$ = _useApi[0],\n      data = _useApi$.data,\n      loading = _useApi$.loading,\n      error = _useApi$.error,\n      lastPage = _useApi$.lastPage,\n      fetchImages = _useApi[1];\n\n  var masonryConfigMatchMedia = useMedia(getMediaBreakpoints(masonryConfig), getMasonryConfigExceptLast(masonryConfig), getDefaultMasonryConfig(masonryConfig));\n\n  // Fetch Giphy Api on component mount and on search query change\n\n  var _useState = useState(true),\n      firstRun = _useState[0],\n      setFirstRun = _useState[1];\n\n  var isFirstRun = useRef(true);\n  useEffect(function () {\n    fetchImages(apiUrl(0));\n    onSearch(query);\n\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      setFirstRun(false);\n    }\n  }, [debouncedQuery]);\n\n  return React.createElement(\n    'div',\n    {\n      className: 'reactGiphySearchbox-componentWrapper' + (wrapperClassName ? ' ' + wrapperClassName : ''),\n      style: { width: getComponentWrapperWidth(masonryConfigMatchMedia) }\n    },\n    React.createElement(SearchForm, {\n      value: query,\n      setValue: handleInputChange,\n      onSubmit: handleSubmit,\n      loadingData: loading,\n      searchFormClassName: searchFormClassName,\n      placeholder: searchPlaceholder,\n      autoFocus: autoFocus\n    }),\n    React.createElement(\n      'div',\n      {\n        className: 'reactGiphySearchbox-listWrapper' + (listWrapperClassName ? ' ' + listWrapperClassName : ''),\n        style: { height: gifListHeight }\n      },\n      React.createElement(Alert, {\n        show: data.length === 0 && !loading && !error && !firstRun,\n        message: messageNoMatches\n      }),\n      React.createElement(Alert, { show: error, message: messageError }),\n      React.createElement(Spinner, { show: loading, message: messageLoading, image: loadingImage }),\n      React.createElement(\n        InfiniteScroll,\n        {\n          pageStart: 0,\n          loadMore: function loadMore(page) {\n            return fetchImages(apiUrl(page * gifPerPage), true);\n          },\n          hasMore: !loading && !lastPage,\n          useWindow: false,\n          initialLoad: false,\n          loader: !firstRun && React.createElement(\n            'div',\n            { key: 'loading' },\n            React.createElement(Spinner, {\n              show: loading,\n              message: messageLoading,\n              image: loadingImage\n            })\n          )\n        },\n        data.length > 0 && React.createElement(\n          MasonryLayout,\n          { sizes: masonryConfig },\n          data.map(function (item) {\n            return React.createElement(ImageItem, {\n              item: item,\n              size: masonryConfigMatchMedia.imageWidth,\n              key: item.id,\n              listItemClassName: listItemClassName,\n              onSelect: onSelect,\n              backgroundColor: imageBackgroundColor,\n              imageRenditionName: imageRenditionName,\n              imageRenditionFileType: imageRenditionFileType\n            });\n          })\n        )\n      )\n    ),\n    poweredByGiphy && React.createElement(PoweredByGiphy, { image: poweredByGiphyImage })\n  );\n};\n\nReactGiphySearchBox.defaultProps = {\n  autoFocus: false,\n  gifListHeight: '300px',\n  gifPerPage: 20,\n  imageBackgroundColor: '#eee',\n  imageRenditionFileType: 'gif',\n  imageRenditionName: 'fixed_width_downsampled',\n  library: 'gifs',\n  listItemClassName: '',\n  listWrapperClassName: '',\n  loadingImage: undefined,\n  masonryConfig: [{ columns: 2, imageWidth: 120, gutter: 5 }],\n  messageError: 'Oops! Something went wrong. Please, try again.',\n  messageLoading: 'Loading...',\n  messageNoMatches: 'No matches found.',\n  onSearch: function onSearch() {},\n  poweredByGiphy: true,\n  poweredByGiphyImage: undefined,\n  rating: 'g',\n  searchFormClassName: '',\n  searchPlaceholder: 'Search for GIFs',\n  wrapperClassName: ''\n};\n\nexport default ReactGiphySearchBox;"]},"metadata":{},"sourceType":"module"}